{"version":3,"sources":["fetch-progress/speedometer.js","fetch-progress/Progress.js","fetch-progress/index.js"],"names":["speedometer","tick","maxTick","resolution","inc","timer","setInterval","unref","seconds","size","buffer","pointer","last","delta","dist","top","btm","length","Progress","emitDelay","parseInt","transferred","speed","streamSpeed","initial","eventStart","percentage","getRemainingBytes","chunk","onProgress","chunkLength","Math","round","Date","now","progress","total","eta","getEta","remaining","isFetchProgressSupported","defaultSize","onComplete","FetchProgress","response","body","headers","contentLength","get","reader","getReader","stream","ReadableStream","start","controller","push","read","then","done","value","close","flow","enqueue","Response"],"mappings":";;;;;;kBAWwBA;AAXxB;AACA,IAAIC,OAAO,CAAX;AACA,IAAIC,UAAU,KAAd;AACA,IAAIC,IEDYqC,SFCC,CAAjB,iBEDgBA;ADFhB,ADIA,IAAIpC,MAAM,SAANA,GAAM,GAAW;AACnBH,SAAQA,OAAO,CAAR,CEEM,EFFOC,OAApB,OEOC;AAAA,AFNF,CAFD,6BEIEuC,WAIC;AAAA,MAJDA,WAIC,oCAJa,CAIb;AAAA,AFJH,IAAIpC,QAAQC,YAAYF,GAAZ,CECVe,CFD4B,OAAOhB,CEIlC,SFJ0B,GAAsB,CAAvC,CAAZ;AEIG,AFHH,IAAIE,EEAFc,IFAQZ,KEGP,AFHH,EAAiBF,MAAME,KAAN,qBEAH,EAGX;AAAA,6BAFDsB,UAEC;AAAA,AFDY,MEDbA,GFCsB7B,OECrB,IFDY,CAAqBQ,OAArB,EAA8B,qBED9B;AAAA,AFEb,ICVmBU,EDUfT,KEFe,EFERN,EEFE,YFEYK,WAAW,CAAzB,CAAX;ACTA,ACOa,AFGb,GEDC,GFCGE,SAAS,CAAC,CAAD,CAAb,ECVYO,MAAZ,EAAsC;AAAA,ACSrC,AFED,MAAIN,ECXgBQ,QDWN,CCXwB,ADWtC,YEHAuB,UACC,iDDT+B,IAAM;ACSrC,AFGD,MEJAA,AFII9B,OAAQX,GEHX,IFGkB,CAAR,GAAaC,OAAxB,oBEJa;ADRyB,ACQzB,WAAM,IAAN;AAAA,AFMb,GELC,MFKM,UAASW,KAAT,EAAgB;ACbrB,ADcA,QAAIC,CCdCG,MAAL,ADcYhB,GCdEmB,IDcKR,IAAR,CCdYK,EDcIf,ICdb,EAAiB,CDc/B,CCdc,KAAwB,CAAtC;AACA,ACQF,AFME,QAAIY,CCdCO,ACQA,MFMMZ,GENGkC,CFMd,CCdA,CDciB7B,ECdE,CAAnB,IDcwBL,GENnB,CAAuBmC,AFMX,QENZ,EAAiC;ADPtC,ACQA,AFMAhC,QENI,CDRCU,ACQAkB,EFMEvC,GCdP,CDcA,ECda,CAAb,iBCQA,EAAiC;ADPjC,ACQE,SDRGsB,ICQIqB,ODRT,CCQE,EDRiB,2BAAY,KAAKtB,KAAL,IAAc,IAA1B,CAAnB;AACA,ACQC,AFMD,SCdKE,EDcEV,KCdP,CDcA,ECde,ADcA,KCdf;AACA,ACIsC,AFUpC,QENM+B,CDRH1B,CDcCR,EEVgC,GAIZiC,GDR1B,GAAiBzB,CDcCV,CEVoB,CAI9BoC,EFMN,EEVoC,AFUdlC,ECdxB,QDckC,CAAV;ACbxB,ACGsC,AFWpCD,QEPYoC,CDPTrB,IDcId,EEX6B,GAIZiC,CDP1B,CDcE,ECdgB,CAAlB,CDcoBlC,EEXkB,CAIxBoC,IFOanC,GEXW,SFWC,CAAZ,GAAgBF,OAAO,CAAvB,GAA2BE,UAAU,CAA5C,CAAlB;ACbF,ADcEA,SCdGe,UAAL,GAAkB,CAAlB;AACD,ACMC,AFQC,QERKqB,gBAAgBD,QAAQE,GAAR,CAAY,gBAAZ,KAAiCP,WAAvD;AACA,QAAMN,WAAW,uBAAaY,aAAb,EAA4B5B,SAA5B,CAAjB;AACA,AFQA,QERM8B,AFQFpC,KAAJ,EAAWH,EERImC,KAAKK,AFQFvC,SERH,CFQa,CER5B,AFQW,KAAuBE,KAAvB;AEPX,QAAMsC,SAAS,IAAIC,cAAJ,CAAmB;AAChCC,AFQF,QAAItC,GET8B,GFSxBL,OAAOC,OERT2C,GFQmB,CAAjB,CAAV,KETkC,EDPhB,ACQE;ADPpB,ACQI,AFQJ,QAAItC,KChBGI,CDgBGV,GERG6C,IAAT,AFQatC,CChBD,ECQI,GDRCA,ADgBX,GAAgBR,GChBnB,CDgBG,CChBmB,EAAtB,ADgB0B,CAAvB,GChByBW,ADgBEV,OAAOC,EChBA,KAAKU,KDgBOZ,IAAZ,EChBT,CDgB4B,CChBD,ADgBlB,EChBT,CAAnC,ADgBmEE,OAA9B,CAArC;ACfD,ACQOsC,iBAAOO,IAAP,GAAcC,IAAd,CAAmB,iBAAqB;AAAA,AFS9C,WAAO/C,KETqBgD,EFSdzC,EETgC,IFSvC,GAAgBd,EETKuD,IAAkB,IFSvC,GACH3C,GADG,GAEH,CAACA,MAAMC,GAAP,IAAcb,UAAd,GAA2BO,OAAOO,MAFtC;AET8C,AFY/C,GAnBD,aEOoC0C,KAAY,SAAZA,KAAY;AFajD,6BCnBU;AACP,ACMQ,aDND,GCMKD,EDNAzC,ECMJ,EAAU,EDNX,IAAe,KAAKI,WAApB,GACH,KAAKM,iBAAL,KAA2B,KAAKL,KAAhC,GAAwC,UADrC,GAEH,CAFJ;AAGD,ACIWoB,yBAAW,EAAX;AACAY,yBAAWM,KAAX;AACA;AACD,yBDLNhC,OAAOC,YAAY;AACtB,ACKQ,UDLFC,MCKM6B,KAAJ,EAAW,CDLC/B,MAAMX,MAA1B;AACA,ACKUkB,WDLLd,WAAL,CCKmBwC,GDLC/B,CCKV,CAAc6B,KAAd,EAAqB9B,EDL/B,QCKU;ADJV,ACKS,WDLJP,KAAL,GAAa,KAAKC,WAAL,CAAiBO,WAAjB,CAAb;AACA,ACKQwB,WDLH5B,UAAL,ECKmBoC,CDLD/B,KAAKC,CCKf,CAAmB2B,GDLT,CAAW,CCKrB,IDL0BtC,WAAL,GAAmB,KAAKJ,MAAxB,GAAiC,GAA5C,CAAlB;AACA,ACKQsC,UDLJ,CAAC,KAAK/B,OAAV,EAAmB;AACjB,ACKK,WAXD,EDMCC,UAAL,GAAkBQ,KAAKC,GAAL,EAAlB;AACA,ACKG,aDLEV,OAAL,GAAe,IAAf;AACD;AACD,ACKI+B,UDJF,KAAKtC,MAAL,IAAe,KAAKI,WAApB,IACAY,KAAKC,GAAL,KAAa,KAAKT,UAAlB,GAA+B,KAAKN,SAFtC,EAGE;AACA,ACEC,aDFIM,UAAL,GAAkBQ,KAAKC,GAAL,EAAlB;AChBgC,KAAnB,CAAf;ADkBE,ACEF,WAAO,CDFCC,GCEG4B,QDFQ,ACEZ,CAAaZ,MAAb,EAAqB,EAAEL,gBAAF,EAArB,CAAP;ADDIV,ACEL,GA7BD,cD2Ba,KAAKnB,MADG;AAEfI,ACEP,uBDFoB,KAAKA,WAFH;AAGfC,iBAAO,KAAKA,KAHG;AAIfe,AC3CR,eD2Ca,KAAKC,MAAL;AAJU,SAAjB;AAMA,YAAI,KAAKrB,MAAT,EAAiB;AACfkB,mBAASI,SAAT,GAAqB,KAAKZ,iBAAL,EAArB;AACAQ,mBAAST,UAAT,GAAsB,KAAKA,UAA3B;AACD;AACDG,AC/CC,SAASW,UD+CCL,QAAX,MC/CC,GAAoC;ADgDtC,AC/CH,SACE,OAAO4B,QAAP,KAAoB,WAApB,IAAmC,OAAOX,cAAP,KAA0B,WAD/D;ADgDC,AC7CF;;;;;;kBDJoBlC","file":"fetch-progress.db655106.map","sourcesContent":["// Thanks! https://github.com/mafintosh/speedometer\nvar tick = 1;\nvar maxTick = 65535;\nvar resolution = 4;\nvar inc = function() {\n  tick = (tick + 1) & maxTick;\n};\n\nvar timer = setInterval(inc, (1000 / resolution) | 0);\nif (timer.unref) timer.unref();\n\nexport default function speedometer(seconds) {\n  var size = resolution * (seconds || 5);\n  var buffer = [0];\n  var pointer = 1;\n  var last = (tick - 1) & maxTick;\n\n  return function(delta) {\n    var dist = (tick - last) & maxTick;\n    if (dist > size) dist = size;\n    last = tick;\n\n    while (dist--) {\n      if (pointer === size) pointer = 0;\n      buffer[pointer] = buffer[pointer === 0 ? size - 1 : pointer - 1];\n      pointer++;\n    }\n\n    if (delta) buffer[pointer - 1] += delta;\n\n    var top = buffer[pointer - 1];\n    var btm = buffer.length < size ? 0 : buffer[pointer === size ? 0 : pointer];\n\n    return buffer.length < resolution\n      ? top\n      : (top - btm) * resolution / buffer.length;\n  };\n}\n","import speedometer from './speedometer';\n\nexport default class Progress {\n  constructor(length, emitDelay = 1000) {\n    this.length = parseInt(length, 10) || 0;\n    this.transferred = 0;\n    this.speed = 0;\n    this.streamSpeed = speedometer(this.speed || 5000);\n    this.initial = false;\n    this.emitDelay = emitDelay;\n    this.eventStart = 0;\n    this.percentage = 0;\n  }\n\n  getRemainingBytes() {\n    return parseInt(this.length, 10) - parseInt(this.transferred, 10);\n  }\n\n  getEta() {\n    return this.length >= this.transferred\n      ? this.getRemainingBytes() / this.speed * 1000000000\n      : 0;\n  }\n\n  flow(chunk, onProgress) {\n    const chunkLength = chunk.length;\n    this.transferred += chunkLength;\n    this.speed = this.streamSpeed(chunkLength);\n    this.percentage = Math.round(this.transferred / this.length * 100);\n    if (!this.initial) {\n      this.eventStart = Date.now();\n      this.initial = true;\n    }\n    if (\n      this.length >= this.transferred ||\n      Date.now() - this.eventStart > this.emitDelay\n    ) {\n      this.eventStart = Date.now();\n\n      const progress = {\n        total: this.length,\n        transferred: this.transferred,\n        speed: this.speed,\n        eta: this.getEta(),\n      };\n      if (this.length) {\n        progress.remaining = this.getRemainingBytes();\n        progress.percentage = this.percentage;\n      }\n      onProgress(progress);\n    }\n  }\n}\n","import Progress from './Progress';\n\nexport function isFetchProgressSupported() {\n  return (\n    typeof Response !== 'undefined' && typeof ReadableStream !== 'undefined'\n  );\n}\nexport default function({\n  defaultSize = 0,\n  emitDelay = 10,\n  onProgress = () => null,\n  onComplete = () => null,\n}) {\n  return function FetchProgress(response) {\n    if (!isFetchProgressSupported()) {\n      return response;\n    }\n    const { body, headers } = response;\n    const contentLength = headers.get('content-length') || defaultSize;\n    const progress = new Progress(contentLength, emitDelay);\n    const reader = body.getReader();\n    const stream = new ReadableStream({\n      start(controller) {\n        function push() {\n          reader.read().then(({ done, value }) => {\n            if (done) {\n              onComplete({});\n              controller.close();\n              return;\n            }\n            if (value) {\n              progress.flow(value, onProgress);\n            }\n            controller.enqueue(value);\n            push();\n          });\n        }\n\n        push();\n      },\n    });\n    return new Response(stream, { headers });\n  };\n}\n"]}