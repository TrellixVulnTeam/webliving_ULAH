import { ApiBase } from 'agora-rte-sdk';
import { CloudDriveResourceInfo } from '../stores/domain/common/cloud-drive/type';
import { EduSessionInfo } from '../type';
import { ClassState } from '../stores/domain/common/room/type';
export declare class EduApiService extends ApiBase {
    getConfig(): Promise<any>;
    checkIn(session: EduSessionInfo): Promise<any>;
    fetchPersonalResources(userUuid: string, options: {
        nextId?: string;
        tags?: string[];
        resourceName?: string;
        limit?: number;
        pageSize?: number;
        pageNo?: number;
        converted?: number;
        orderBy?: string;
    }): Promise<any>;
    removeMaterials(resourceUuids: string[], userUuid: string): Promise<any>;
    fetchFileUploadSts(roomUuid: string, { resourceUuid, resourceName, ext, size, conversion, }: {
        resourceUuid: string;
        resourceName: string;
        ext: string;
        size: number;
        conversion?: Object;
    }): Promise<any>;
    addCloudDriveFile(resourceUuid: string, userUuid: string, resourceInfo: CloudDriveResourceInfo): Promise<any>;
    getHistoryChatMessage(params: {
        roomUuid: string;
        userUuid: string;
        data: {
            nextId: string;
            sort: number;
        };
    }): Promise<any>;
    getConversationHistoryChatMessage(params: {
        roomUuid: string;
        data: {
            nextId: string;
            sort: number;
            studentUuid: string;
        };
    }): Promise<any>;
    getConversationList(params: {
        roomUuid: string;
        data: {
            nextId: string;
        };
    }): Promise<any>;
    sendChat(params: {
        roomUuid: string;
        userUuid: string;
        data: {
            message: string;
            type: number;
        };
    }): Promise<any>;
    startCarousel(payload: any): Promise<any>;
    sendConversationChat(params: {
        roomUuid: string;
        userUuid: string;
        data: {
            message: string;
            type: number;
        };
    }): Promise<any>;
    stopCarousel(payload: any): Promise<any>;
    kickOutOnceOrBan(userUuid: string, isBan: boolean, roomUuid: string): Promise<any>;
    muteChat(params: {
        roomUuid: string;
        muteChat: number;
    }): Promise<any>;
    sendRewards(params: {
        roomUuid: string;
        rewards: Array<{
            userUuid: string;
            changeReward: number;
        }>;
    }): Promise<any>;
    handsUp(params: {
        roomUuid: string;
        toUserUuid: string;
        payload: any;
    }): Promise<any>;
    allowHandsUp(params: {
        roomUuid: string;
        state: string;
    }): Promise<any>;
    startHandsUp(params: {
        roomUuid: string;
        toUserUuid: string;
        timout?: number;
        retry?: boolean;
    }): Promise<any>;
    waveArm(params: {
        roomUuid: string;
        toUserUuid: string;
        timout?: number;
        retry?: boolean;
    }): Promise<any>;
    dismissHandsUp(params: {
        roomUuid: string;
        toUserUuid: string;
    }): Promise<any>;
    cancelHandsUp(params: {
        roomUuid: string;
        toUserUuid?: string;
    }): Promise<any>;
    acceptHandsUp(params: {
        roomUuid: string;
        toUserUuid: string;
    }): Promise<any>;
    refuseHandsUp(params: {
        roomUuid: string;
        toUserUuid: string;
    }): Promise<any>;
    revokeCoVideo(params: {
        roomUuid: string;
        toUserUuid?: string;
    }): Promise<any>;
    revokeAllCoVideo(params: {
        roomUuid: string;
    }): Promise<any>;
    updateRecordingState(params: {
        roomUuid: string;
        state: number;
        videoBitrate?: number;
        backupCount?: number;
        url?: string;
    }): Promise<any>;
    updateClassState(params: {
        roomUuid: string;
        state: ClassState;
    }): Promise<any>;
    startShareScreen(roomId: string, userUuid: string): Promise<any>;
    stopShareScreen(roomId: string, userUuid: string): Promise<any>;
    updateTrack(roomUuid: string, widgetUuid: string, body: any): Promise<{
        data: any;
    }>;
    deleteTrack(roomUuid: string, widgetUuid: string, body: any): Promise<{
        data: any;
    }>;
    updateExtAppProperties(roomId: string, extAppUuid: string, properties: any, common?: any, cause?: any): Promise<any>;
    deleteExtAppProperties(roomId: string, extAppUuid: string, properties: string[], cause?: any): Promise<any>;
    updateFlexProperties(roomId: string, properties: any, cause: any): Promise<any>;
    reportMicCameraStateLeagcy(payload: {
        roomUuid: string;
        userUuid: string;
        data: any;
    }): Promise<any>;
}
