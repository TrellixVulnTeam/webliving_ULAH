/// <reference types="react" />
import { WhiteboardTool } from '../../..';
import { EduUIStoreBase } from './base';
export declare enum ToolbarItemCategory {
    PenPicker = 0,
    ColorPicker = 1,
    Cabinet = 2
}
export interface CabinetItem {
    id: string;
    name: string;
    iconType: string;
    icon?: React.ReactElement;
}
export declare class ToolbarItem {
    static fromData(data: {
        value: string;
        label: string;
        icon: string;
        category?: ToolbarItemCategory;
    }): ToolbarItem;
    value: string;
    label: string;
    icon: string;
    category?: ToolbarItemCategory;
    constructor(icon: string, value: string, label: string, category?: ToolbarItemCategory);
}
export declare class ToolbarUIStore extends EduUIStoreBase {
    readonly defaultColors: string[];
    readonly defaultPens: string[];
    readonly paletteMap: Record<string, string>;
    onInstall(): void;
    activeMap: Record<string, boolean>;
    private _activeCabinetItem?;
    private _screenSharing;
    /**
     * 当前激活的工具
     * @returns
     */
    get activeTool(): string;
    /**
     * 当前激活的画笔类工具
     * @returns
     */
    get selectedPenTool(): string;
    /**
     * 画笔工具是否激活
     * @returns
     */
    get isPenToolActive(): boolean;
    /**
     * 选中的画笔颜色
     * @returns
     */
    get currentColor(): string;
    /**
     * 选中的画笔粗细
     * @returns
     */
    get strokeWidth(): number;
    /**
     * 是否正在进行屏幕共享
     * @returns
     */
    get isScreenSharing(): boolean;
    /**
     * 打开 ExtApp 扩展工具
     * @param id
     */
    handleCabinetItem(id: string): void;
    /**
     * 选中工具
     * @param tool
     * @returns
     */
    setTool(tool: string): void;
    readonly penTools: string[];
    /**
     * 设置画笔粗细
     * @param value
     * @returns
     */
    changeStroke(value: any): void;
    /**
     * 设置画笔颜色，支持 Hex 色值
     * @param value
     * @returns
     */
    changeHexColor(value: any): void;
    /**
     * 当前激活的 ExtApp
     * @returns
     */
    get activeCabinetItem(): string | undefined;
    /**
     * ExtApp 列表
     * @returns
     */
    get cabinetItems(): CabinetItem[];
    /**
     * 工具栏工具列表
     * @returns
     */
    get tools(): ToolbarItem[];
    /**
     * 老师工具栏工具列表
     * @returns
     */
    get teacherTools(): ToolbarItem[];
    /**
     * 学生工具栏工具列表
     * @returns
     */
    get studentTools(): ToolbarItem[];
    /**
     * 转 Edu 工具 对象
     * @param tool
     * @returns
     */
    convertUITools2EduTools(tool: string): WhiteboardTool;
    /**
     * 转 UI 工具对象
     * @param tool
     * @returns
     */
    convertEduTools2UITools(tool: WhiteboardTool): string;
    onDestroy(): void;
}
