import { AGRtcDeviceInfo, AgoraRteMediaSourceState, AgoraMediaControl, AGScreenShareDevice, AGScreenShareType, BeautyEffect } from 'agora-rte-sdk';
import { ClassroomState } from '../../../../type';
import { EduStoreBase } from '../base';
export declare const DEVICE_DISABLE = "DEVICE_DISABLE";
export declare class MediaStore extends EduStoreBase {
    private readonly _disposers;
    videoCameraDevices: AGRtcDeviceInfo[];
    audioRecordingDevices: AGRtcDeviceInfo[];
    audioPlaybackDevices: AGRtcDeviceInfo[];
    cameraDeviceId?: string;
    recordingDeviceId?: string;
    playbackDeviceId?: string;
    localCameraTrackState: AgoraRteMediaSourceState;
    localMicTrackState: AgoraRteMediaSourceState;
    localScreenShareTrackState: AgoraRteMediaSourceState;
    /**
     * range from [0,1]
     */
    localMicAudioVolume: number;
    /**
     * range from [0,1]
     */
    localPlaybackTestVolume: number;
    audioElement?: HTMLAudioElement;
    isMirror: boolean;
    isBeauty: boolean;
    disable: boolean;
    audioVolumeLevel: number;
    isAudioPlaying: boolean;
    beautyEffectOptions: BeautyEffect;
    private _previousCameraId?;
    private _previousRecordingId?;
    get mediaControl(): AgoraMediaControl;
    setMirror: (v: boolean) => void;
    setBeauty: (v: boolean) => void;
    setupLocalVideo: (dom: HTMLElement, mirror: boolean) => void;
    setupLocalScreenShare(dom: HTMLElement): void;
    startPlaybackDeviceTest: (url: string) => void;
    stopPlaybackDeviceTest: () => void;
    startRecordingDeviceTest: (indicateInterval: number) => void;
    stopRecordingDeviceTest: () => void;
    enableLocalVideo(value: boolean): void;
    enableLocalAudio(value: boolean): void;
    private _enableLocalVideo;
    private _enableLocalAudio;
    startScreenShareCapture(id?: string, type?: AGScreenShareType): void;
    stopScreenShareCapture(): void;
    isScreenDeviceEnumerateSupported(): boolean;
    hasScreenSharePermission(): boolean;
    getWindowDevices(): AGScreenShareDevice[];
    getDisplayDevices(): AGScreenShareDevice[];
    setCameraDevice: (id: string) => void;
    setRecordingDevice: (id: string) => void;
    setPlaybackDevice: (id: string) => void;
    setBeautyEffect: (options: BeautyEffect) => void;
    get cameraAccessors(): {
        classroomState: ClassroomState;
        cameraDeviceId: string | undefined;
        localCameraStreamUuid: string | undefined;
    };
    get micAccessors(): {
        classroomState: ClassroomState;
        recordingDeviceId: string | undefined;
        localCameraStreamUuid: string | undefined;
    };
    onInstall(): void;
    onDestroy(): void;
}
