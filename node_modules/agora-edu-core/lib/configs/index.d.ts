import { AgoraRteEngineConfig } from 'agora-rte-sdk';
import { EduSessionInfo, EduRoleTypeEnum, EduRoomTypeEnum, CourseWareList } from '../type';
import { CloudDriveResource } from '../stores/domain/common/cloud-drive/struct';
import { AgoraRteOptions } from 'agora-rte-sdk/src/configs';
import { IAgoraExtApp, IAgoraWidget } from '..';
export interface WhiteboardConfigs {
    boardAppId: string;
    boardId: string;
    boardRegion: string;
    boardToken: string;
}
export interface WhiteboardDefaults {
    scale: number;
}
export declare enum Platform {
    PC = "PC",
    H5 = "H5"
}
export declare class EduClassroomConfig {
    private static _classroomConfig?;
    static get shared(): EduClassroomConfig;
    static setConfig(config: EduClassroomConfig): void;
    readonly appId: string;
    readonly recordUrl: string;
    readonly platform: Platform;
    private readonly _rteEngineConfig;
    private _sessionInfo?;
    private _boardConfig?;
    private _courseWareList?;
    private _widgets;
    private _extApps;
    private _currentAPIVersion;
    private _compatibleVersions;
    boardDefaults: WhiteboardDefaults;
    host: string;
    ignoreUrlRegionPrefix: boolean;
    get headers(): Record<string, string | number>;
    constructor(appId: string, sessionInfo: EduSessionInfo, recordUrl: string, rteOpts?: AgoraRteOptions, widgets?: {
        [key: string]: IAgoraWidget;
    }, extApps?: IAgoraExtApp[], platform?: Platform);
    get sessionInfo(): EduSessionInfo;
    setWhiteboardConfig(config?: WhiteboardConfigs): void;
    setCompatibleVersions(compatibleVersions: string[]): void;
    get isLowAPIVersionCompatibleRequired(): boolean;
    get whiteboardConfig(): WhiteboardConfigs;
    setCourseWareList(list?: CourseWareList): void;
    get courseWareList(): CloudDriveResource[];
    get rteEngineConfig(): AgoraRteEngineConfig;
    get widgets(): {
        [key: string]: IAgoraWidget;
    };
    get extApps(): readonly IAgoraExtApp[];
    static getVersion(): string;
    static getRtcVersion(): string;
    static defaultMediaOptions(roomType: EduRoomTypeEnum, userRole: EduRoleTypeEnum): {
        width: number;
        height: number;
        bitrate: number;
        frameRate: number;
    };
}
