import { ChatEvent, ChatListType, Conversation, EduClassroomUIStore, MessageItem } from 'agora-edu-core';
export declare class WidgetChatUIStore {
    coreStore: EduClassroomUIStore;
    activeTab: ChatListType;
    activeConversation?: Conversation;
    messageLastReadTs?: number;
    nextMsgId: string;
    nextClId: string;
    nextConvMsgId: object;
    unmuted: boolean;
    isMounted: boolean;
    unreadMessageSet: Set<string>;
    unreadCoversationMap: Map<string, Array<number>>;
    constructor(coreStore: EduClassroomUIStore);
    getHistoryChatMessage: (data: {
        nextId: string;
        sort: number;
    }) => Promise<any>;
    muteChat: () => void;
    unmuteChat: () => void;
    sendMessage: (message: string) => void;
    sendMessageToConversation: (message: string, conversation: Conversation) => void;
    getConversationList: (data: {
        nextId: string;
        sort: number;
    }) => Promise<any>;
    getConversationHistoryChatMessage: (data: {
        nextId: string;
        sort: number;
        studentUuid: string;
    }) => void;
    sendText: (evt: ChatEvent) => void;
    onCanChattingChange: (canChatting: boolean) => void;
    /**
     * room conversation-list conversation  ac
     *
     * activetab === 'conversation' find conversation useruuid clear
     * @param activeTab
     * @param conversation
     */
    updateActiveTab: (activeTab: ChatListType, conversation?: Conversation | undefined) => void;
    setUnreadConversationMap: (id: string, value: number[]) => void;
    refreshMessageList: () => Promise<void>;
    refreshConversationList: () => Promise<void>;
    refreshConversationMessageList: (conversation: Conversation) => Promise<void>;
    get chatConversationList(): Conversation[];
    get convertedMessageList(): {
        id: string;
        uid: string;
        userName: string;
        role: string;
        timestamp: number;
        content: string;
        isOwn: boolean | undefined;
        unread: boolean | undefined;
    }[];
    get convertedConversationList(): Conversation[];
    get unreadMessageCount(): number;
    get isFullScreen(): boolean;
    get roomChatMessages(): MessageItem[];
    get roomChatConversations(): Conversation[];
    get isHost(): boolean;
    get unReadCount(): number;
    unreadConversationCountFn: (id: string) => number;
}
