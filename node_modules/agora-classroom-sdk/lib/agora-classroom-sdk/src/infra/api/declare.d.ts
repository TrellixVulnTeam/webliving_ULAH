import { EduRoleTypeEnum } from 'agora-edu-core';
import { AgoraEduClassroomEvent } from 'agora-edu-core';
export declare type AgoraRegion = Uppercase<AgoraRegionString>;
export declare const regionMap: {
    readonly AP: "sg";
    readonly CN: "cn-hz";
    readonly EU: "gb-lon";
    readonly NA: "us-sv";
};
export declare type AgoraRegionString = 'cn' | 'ap' | 'na' | 'eu';
export declare type RoomConfigProps<T> = {
    store: T;
};
export interface RoomComponentConfigProps<T> {
    store: T;
    dom: Element;
}
export declare type AgoraEduSDKConfigParams = {
    appId: string;
    region?: string;
};
export interface RoomParameters {
    roomUuid: string;
    userUuid: string;
    roomName: string;
    userName: string;
    userRole: EduRoleTypeEnum;
    roomType: number;
}
export declare type ListenerCallback = (evt: AgoraEduClassroomEvent, ...args: any[]) => void;
export declare type PPTDataType = {
    active: boolean;
    pptType: PPTType;
    id: string;
    data: any;
    cover: any;
    showName: string;
};
export declare enum PPTType {
    dynamic = "dynamic",
    static = "static",
    mp4 = "mp4",
    mp3 = "mp3",
    init = "init"
}
export declare type NetlessImageFile = {
    width: number;
    height: number;
    file: File;
    coordinateX: number;
    coordinateY: number;
};
export declare type TaskType = {
    uuid: string;
    folder: string;
    imageFile: NetlessImageFile;
};
export declare type OssExistsFileInfo = {
    isExist: boolean;
    fileOssUrl: string;
    findInfo: string;
};
export declare type PPTProgressListener = (phase: PPTProgressPhase, percent: number) => void;
export declare enum PPTProgressPhase {
    Checking = 0,
    Uploading = 1,
    Converting = 2
}
