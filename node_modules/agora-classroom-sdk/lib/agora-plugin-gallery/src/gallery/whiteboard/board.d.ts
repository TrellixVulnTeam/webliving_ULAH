/// <reference types="node" />
import { EventEmitter } from 'events';
import type { WhiteWebSdk, Plugins, Room, Player, JoinRoomParams, ReplayRoomParams, ViewMode } from 'white-web-sdk';
export interface SceneFile {
    name: string;
    type: string;
}
export declare type SceneOption = {
    name?: string;
    type?: string;
    currentScene: boolean;
};
export declare class BoardClient extends EventEmitter {
    client: WhiteWebSdk;
    plugins?: Plugins<Object>;
    room: Room;
    player: Player;
    sceneIndex: number;
    disconnected?: boolean;
    private appIdentifier;
    private whiteboardDependencies;
    constructor(config?: {
        identity: string;
        appIdentifier: string;
        dependencies: Map<string, any>;
    });
    initPlugins(identity: string, videoPlugin: any, audioPlugin: any): void;
    init(): void;
    join(params: JoinRoomParams): Promise<void>;
    replay(params: ReplayRoomParams): Promise<void>;
    followMode(mode: ViewMode): void;
    startFollow(): void;
    cancelFollow(): void;
    grantPermission(userUuid: string): void;
    revokePermission(userUuid: string): void;
    destroy(): Promise<void>;
}
