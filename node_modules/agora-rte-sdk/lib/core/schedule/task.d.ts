export declare enum ActionWhenTaskFail {
    continue = 0,
    exit = 1
}
declare type IntervalArguments = {
    runnable: Function;
    interval: number;
    immediate?: boolean;
    onFail: (err: any) => ActionWhenTaskFail;
    onComplete?: () => void;
};
declare type PollingArguments = IntervalArguments & {
    once?: boolean;
};
export declare class PollingTask {
    private __arguments;
    private __timer?;
    private __running;
    constructor(__arguments: PollingArguments);
    start(): void;
    private poll;
    stop(): void;
    get isStopped(): boolean;
}
export declare class IntervalTask {
    private __arguments;
    private __timer?;
    private __running;
    constructor(__arguments: IntervalArguments);
    start(): void;
    private poll;
    stop(): void;
    get isStopped(): boolean;
}
export {};
