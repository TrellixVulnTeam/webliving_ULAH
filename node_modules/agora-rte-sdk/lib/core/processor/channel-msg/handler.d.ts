import { AgoraRteMessageHandleTask, AgoraRtePeerMessageHandleTask, AgoraRteSyncSnapshotData } from './struct';
import { AgoraRteSyncDataStore } from './data';
import { AGEventEmitter } from '../../utils/events';
import { Injectable } from '../../decorator/type';
export declare enum AgoraRteChannelMessageCmd {
    Chat = 3,
    RoomProperty = 4,
    RoomProperties = 5,
    UserInOut = 20,
    UserInfo = 21,
    UserProperty = 22,
    UserProperties = 23,
    StreamInOut = 40,
    StreamsInOut = 41,
    MessageExtension = 99
}
export declare enum AgoraRtePeerMessageCmd {
    PeerChat = 1
}
export declare enum AgoraRteEventType {
    SnapshotUpdated = "snapshot-updated",
    ChatReceived = "chat-received",
    UserAdded = "user-added",
    UserUpdated = "user-updated",
    UserRemoved = "user-removed",
    RoomPropertyUpdated = "room-property-updated",
    UserPropertyUpdated = "user-property-updated",
    LocalStreamAdded = "local-stream-added",
    LocalStreamUpdate = "local-stream-update",
    LocalStreamRemove = "local-stream-removed",
    RemoteStreamAdded = "remote-stream-added",
    RemoteStreamUpdate = "remote-stream-update",
    RemoteStreamRemove = "remote-stream-removed",
    ChatUserMessage = "user-chat-message",
    ChatRoomMessage = "room-chat-message",
    NetworkStats = "network-stats",
    LocalAudioVolume = "local-audio-volume",
    AudioVolumes = "audio-volumes",
    LocalVideoCameraListChanged = "local-video-camera-list-changed",
    LocalAudioRecordingListChanged = "local-audio-recording-list-changed",
    LocalAudioPlaybackListChanged = "local-audio-playback-list-changed",
    LocalVideoTrackStateChanged = "local-video-track-state-changed",
    LocalAudioTrackStateChanged = "local-audio-track-state-changed",
    RtcConnectionStateChanged = "rtc-connection-state-changed",
    RtmConnectionStateChanged = "rtm-connection-state-changed",
    RteConnectionStateChanged = "rte-connection-state-changed"
}
export interface AgoraRteChannelMessageHandle {
    on(evt: AgoraRteEventType, ...args: any[]): this;
    off(evt: AgoraRteEventType, ...args: any[]): this;
}
export declare class AgoraRteChannelMessageHandle extends AGEventEmitter {
    protected logger: Injectable.Logger;
    private _dataStore;
    sceneId: string;
    userUuid: string;
    streamUuid: string;
    constructor(dataStore: AgoraRteSyncDataStore, { sceneId, userUuid, streamUuid, }: {
        sceneId: string;
        userUuid: string;
        streamUuid: string;
    });
    handleSnapshot(snapshot: AgoraRteSyncSnapshotData): void;
    handleMessage(task: AgoraRteMessageHandleTask): void;
    handlePeerMessage(task: AgoraRtePeerMessageHandleTask): void;
    private _handlePeerChat;
    private _handleChat;
    private _mergeProperties;
    private _handleRoomProperties;
    private _handleUserInOut;
    private _handleUserInfo;
    private _handleUserProperty;
    private _handleUserProperties;
    private _processStreamEvent;
    private _handleStreamInOut;
    private _handleStreamsInOut;
    private _handleMessageExtension;
}
