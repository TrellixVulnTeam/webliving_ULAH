/// <reference types="node" />
import { EventEmitter } from 'events';
import { Injectable } from '../../decorator/type';
import { AGRtmManager } from '../../rtm';
import { AgoraRteSyncDataStore } from './data';
import { AgoraRteChannelMessageHandle } from './handler';
import { AgoraRteMessageHandleTask, AgoraRteSyncSnapshotData } from './struct';
export declare class AgoraRteSynchronizer {
    protected logger: Injectable.Logger;
    sceneId: string;
    userUuid: string;
    streamUuid: string;
    private _channelObserver;
    private _snapshot?;
    private _queueTasks;
    private _currentTask?;
    private _lastSeq;
    private _requestingGap;
    private _handleChannelMessage;
    private _handlePeerMessage;
    handle: AgoraRteChannelMessageHandle;
    constructor(dataStore: AgoraRteSyncDataStore, { sceneId, userUuid, streamUuid, channelObserver, rtm, }: {
        sceneId: string;
        userUuid: string;
        streamUuid: string;
        channelObserver: EventEmitter;
        rtm: AGRtmManager;
    });
    handlePeerMessage({ message, peerId }: {
        message: string;
        peerId: string;
    }): void;
    handleChannelMessage({ message, memberId, }: {
        message: {
            text: string;
        };
        memberId: string;
    }): void;
    syncSnapshot(snapshot: AgoraRteSyncSnapshotData): void;
    findSequenceGap(): {
        seq: number;
        count: number;
        queueHeadSeq: number;
    } | null;
    sortTasks(): void;
    addTask(task: AgoraRteMessageHandleTask): void;
    prependTasks(tasks: AgoraRteMessageHandleTask[]): void;
    notifyTaskQueueUpdate(): void;
    runNextTask: () => void;
    dequeueTask(): AgoraRteMessageHandleTask | null | undefined;
    processTask(task: AgoraRteMessageHandleTask): Promise<void>;
    syncSequenceUntilSuccess(lastSeq: number, count: number): Promise<void>;
    reset(): void;
}
