import Immutable from 'immutable';
import { AgoraRteMediaSourceState } from '../../..';
import { AgoraRteAudioSourceType, AgoraRteMediaPublishState, AgoraRteVideoSourceType } from '../../media/track';
export declare type AgoraFromUser = {
    userUuid: string;
    userName: string;
    role: string;
};
export declare class AgoraRteSyncSnapshotData {
    static fromData(data: any): AgoraRteSyncSnapshotData;
    sequence: number;
    users: Map<string, AgoraUser>;
    streams: Map<string, AgoraStream>;
    roomProperties: Immutable.Map<unknown, unknown>;
    room: AgoraRoom;
    constructor(data: any);
}
export interface AgoraRteOperator {
    userUuid: string;
    userName: string;
    role: string;
}
export interface AgoraRteMessageHandleTask {
    sequence: {
        cmd: number;
        operator: AgoraRteOperator;
        sequence: number;
        data: any;
    };
}
export interface AgoraRtePeerMessageHandleTask {
    cmd: number;
    data: any;
}
export interface IAgoraUserData {
    userName: string;
    role: string;
    userUuid: string;
    userProperties: any;
}
export declare class AgoraUser {
    static fromData(data: any): AgoraUser;
    userUuid: string;
    userName: string;
    userRole: string;
    userProperties: Immutable.Map<any, any>;
    constructor(data: IAgoraUserData);
    setUserProperties(userProperties: any): void;
    toString(): string;
}
export interface IAgoraStreamData {
    streamUuid: string;
    streamName: string;
    fromUser: AgoraFromUser;
    videoSourceType: AgoraRteVideoSourceType;
    audioSourceType: AgoraRteAudioSourceType;
    videoState: AgoraRteMediaPublishState;
    audioState: AgoraRteMediaPublishState;
    videoSourceState: AgoraRteMediaSourceState;
    audioSourceState: AgoraRteMediaSourceState;
}
export declare class AgoraStream {
    static fromData(data: IAgoraStreamData): AgoraStream;
    streamUuid: string;
    streamName: string;
    fromUser: AgoraFromUser;
    videoSourceType: AgoraRteVideoSourceType;
    audioSourceType: AgoraRteAudioSourceType;
    videoState: AgoraRteMediaPublishState;
    audioState: AgoraRteMediaPublishState;
    videoSourceState: AgoraRteMediaSourceState;
    audioSourceState: AgoraRteMediaSourceState;
    previous?: AgoraStream;
    constructor(data: IAgoraStreamData);
    toString(): string;
}
export interface IAgoraRoomData {
    roomName: string;
    roomUuid: string;
    roomScenario: string;
}
export declare class AgoraRoom {
    static fromData(data: any): AgoraRoom;
    roomName: string;
    roomUuid: string;
    roomScenario: string;
    constructor(data: IAgoraRoomData);
}
export interface IAgoraChatMessage {
    fromUser: AgoraFromUser;
    message: string;
    type: number;
    sendTime: number;
    sensitiveWords: string[];
    messageId?: string;
    peerMessageId?: string;
}
export declare class AgoraChatMessage {
    static fromData(data: IAgoraChatMessage): AgoraChatMessage;
    fromUser: AgoraFromUser;
    message: string;
    type: number;
    sendTime: number;
    sensitiveWords: string[];
    messageId?: string;
    constructor(data: IAgoraChatMessage);
    toString(): string;
}
