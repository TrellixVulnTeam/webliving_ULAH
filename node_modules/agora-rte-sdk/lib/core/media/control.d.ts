import { AGEventEmitter } from '../utils/events';
import { AGRtcManager } from '../rtc';
import { AgoraRteCameraVideoTrack, AgoraRteMicrophoneAudioTrack, AgoraRteScreenShareTrack } from './track';
import { AGRtcDeviceInfo, AGScreenShareDevice, BeautyEffect } from '../../';
export declare enum AgoraMediaControlEventType {
    cameraListChanged = "camera-list-changed",
    localAudioVolume = "local-audio-volume",
    localAudioRecordingListChanged = "local-audio-recording-list-changed",
    localVideoTrackChanged = "local-video-track-changed",
    localAudioTrackChanged = "local-audio-track-changed",
    trackStateChanged = "track-state-changed",
    playbackDeviceListChanged = "playback-device-list-changed",
    recordingDeviceListChanged = "recording-device-list-changed",
    localAudioPlaybackVolumeIndicator = "start-test-audio-playback-volume-indicator",
    audioPlaybackStateChanged = "audio-playback-state-changed"
}
export declare class AgoraMediaControl extends AGEventEmitter {
    camera?: AgoraRteCameraVideoTrack;
    microphone?: AgoraRteMicrophoneAudioTrack;
    screen?: AgoraRteScreenShareTrack;
    private _rtc;
    constructor(rtc: AGRtcManager);
    private _addEventListener;
    createCameraVideoTrack(): AgoraRteCameraVideoTrack;
    createMicrophoneAudioTrack(): AgoraRteMicrophoneAudioTrack;
    createScreenShareTrack(): AgoraRteScreenShareTrack;
    getVideoCameraList(): AGRtcDeviceInfo[];
    getAudioRecordingList(): AGRtcDeviceInfo[];
    getAudioPlaybackList(): AGRtcDeviceInfo[];
    isScreenDeviceEnumerateSupported(): boolean;
    hasScreenSharePermission(): boolean;
    getWindowDevices(): AGScreenShareDevice[];
    getDisplayDevices(): AGScreenShareDevice[];
    startAudioRecordingDeviceTest(indicateInterval: number): number;
    stopAudioRecordingDeviceTest(): number;
    startAudioPlaybackDeviceTest(url: string): number;
    stopAudioPlaybackDeviceTest(): number;
    setBeautyEffectOptions(enable: boolean, options: BeautyEffect): number;
}
