import { AgoraRteMediaSourceState, AGScreenShareType } from '../..';
import { AGRtcManager } from '../rtc';
import { AgoraRtcVideoCanvas } from '../rtc/canvas';
export declare enum AgoraRteVideoSourceType {
    None = 0,
    Camera = 1,
    ScreenShare = 2
}
export declare enum AgoraRteAudioSourceType {
    None = 0,
    Mic = 1,
    Mix = 2
}
export declare enum AgoraRteMediaPublishState {
    Unpublished = 0,
    Published = 1
}
export declare abstract class AgoraRteMediaTrack {
    videoSourceType: AgoraRteVideoSourceType;
    audioSourceType: AgoraRteAudioSourceType;
    protected rtc: AGRtcManager;
    constructor(rtc: AGRtcManager, { videoSourceType, audioSourceType, }: {
        videoSourceType?: AgoraRteVideoSourceType;
        audioSourceType?: AgoraRteAudioSourceType;
    });
    abstract start(): number;
    abstract stop(): number;
}
export declare class AgoraRteCameraVideoTrack extends AgoraRteMediaTrack {
    state: AgoraRteMediaSourceState;
    constructor(rtc: AGRtcManager);
    setView(canvas: AgoraRtcVideoCanvas): void;
    setDeviceId(deviceid: string): void;
    setVideoEncoderConfiguration(): void;
    start(): number;
    stop(): number;
}
export declare class AgoraRteMicrophoneAudioTrack extends AgoraRteMediaTrack {
    state: AgoraRteMediaSourceState;
    constructor(rtc: AGRtcManager);
    setRecordingDevice(deviceId: string): number;
    setPlaybackDevice(deviceId: string): number;
    start(): number;
    stop(): number;
}
export declare class AgoraRteScreenShareTrack extends AgoraRteMediaTrack {
    constructor(rtc: AGRtcManager);
    setView(canvas: AgoraRtcVideoCanvas): void;
    start(): number;
    startWithParams(id?: string, type?: AGScreenShareType): number;
    stop(): number;
}
