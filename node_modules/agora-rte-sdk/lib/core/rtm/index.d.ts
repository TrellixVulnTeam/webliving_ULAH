/// <reference types="node" />
import { EventEmitter } from 'events';
import AgoraRTM, { RtmChannel } from 'agora-rtm-sdk';
export declare enum AgoraRtmConnectionState {
    DISCONNECTED = "DISCONNECTED",
    CONNECTING = "CONNECTING",
    CONNECTED = "CONNECTED",
    RECONNECTING = "RECONNECTING",
    ABORTED = "ABORTED"
}
interface AGRtmManagerInitConfig {
    uploadLog?: boolean;
}
export declare class AGRtmManager extends EventEmitter {
    connectionState: AgoraRtmConnectionState;
    prevConnectionState: AgoraRtmConnectionState;
    channels: Record<string, any>;
    private _client?;
    constructor();
    get client(): ReturnType<typeof AgoraRTM.createInstance>;
    get sessionId(): string;
    get logFilter(): {
        error: boolean;
        warn: boolean;
        info: boolean;
        track: boolean;
        debug: boolean;
    };
    private get _region();
    login(token: string, uid: string, configs: AGRtmManagerInitConfig): Promise<void>;
    createObserverChannel(channelName: string): [RtmChannel, EventEmitter];
    join(channel: RtmChannel, bus: EventEmitter, channelName: string): Promise<void>;
    leave(channelName: string): Promise<void>;
    private releaseChannels;
    private releaseClient;
    release(eventClient: any): void;
    reset(): void;
    private _destroyRtm;
    destroyRtm(): void;
    sendChannelMessage(channelName: string, message: any, options: any): Promise<void>;
    sendPeerMessage(peerId: string, message: any, options: any): Promise<boolean>;
}
export {};
