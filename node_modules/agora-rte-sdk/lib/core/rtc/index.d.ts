import { AgoraRteVideoSourceType } from '../media/track';
import { AGRtcConfig } from './adapter';
import { LocalAudioTrackStateEvent, LocalVideoTrackStateEvent, RtcAudioDeviceManagerBase, RtcVideoDeviceManagerBase } from './adapter/base';
import { AgoraRtcVideoCanvas } from './canvas';
import { AGRtcChannel } from './channel';
import { AGRtcDeviceInfo, AGScreenShareDevice, AGScreenShareType, BeautyEffect } from './type';
export declare class AGRtcManager {
    private _adapter;
    private _channels;
    constructor(configs?: AGRtcConfig);
    getRtcChannel(channelName: string): AGRtcChannel;
    getVideoDeviceManager(): RtcVideoDeviceManagerBase;
    getAudioDeviceManager(): RtcAudioDeviceManagerBase;
    getWindowDevices(): AGScreenShareDevice[];
    getDisplayDevices(): AGScreenShareDevice[];
    isScreenDeviceEnumerateSupported(): boolean;
    setVideoCameraDevice(deviceId: string): number;
    setAudioRecordingDevice(deviceId: string): number;
    setAudioPlaybackDevice(deviceId: string): number;
    enableLocalVideo(enable: boolean): number;
    setupLocalVideo(canvas: AgoraRtcVideoCanvas, videoSourceType: AgoraRteVideoSourceType): number;
    setupRemoteVideo(canvas: AgoraRtcVideoCanvas): number;
    enableLocalAudio(enable: boolean): number;
    startScreenCapture(id?: string, type?: AGScreenShareType): number;
    stopScreenCapture(): number;
    onLocalScreenShareTrackStateChanged(cb: LocalVideoTrackStateEvent): number;
    startAudioRecordingDeviceTest(indicateInterval: number): number;
    stopAudioRecordingDeviceTest(): number;
    startAudioPlaybackDeviceTest(url: string): number;
    stopAudioPlaybackDeviceTest(): number;
    onLocalCameraListChanged(cb: (addNewDevice: boolean, newDevices: AGRtcDeviceInfo[], allDevices: AGRtcDeviceInfo[]) => void): number;
    onLocalRecordingDeviceListChanged(cb: (addNewDevice: boolean, newDevices: AGRtcDeviceInfo[], allDevices: AGRtcDeviceInfo[]) => void): number;
    onLocalPlaybackListChanged(cb: (addNewDevice: boolean, newDevices: AGRtcDeviceInfo[], allDevices: AGRtcDeviceInfo[]) => void): number;
    onLocalVideoTrackStateChanged(cb: LocalVideoTrackStateEvent): number;
    onLocalAudioTrackStateChanged(cb: LocalAudioTrackStateEvent): number;
    onLocalAudioVolume(cb: (volume: number) => void): number;
    setBeautyEffectOptions(enable: boolean, options: BeautyEffect): number;
    hasScreenSharePermission(): boolean;
    destroy(): number;
}
