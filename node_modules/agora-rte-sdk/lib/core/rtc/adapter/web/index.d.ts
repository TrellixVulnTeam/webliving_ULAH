import { LocalVideoTrackStateEvent, LocalAudioTrackStateEvent, LocalAudioPlaybackVolumeIndicatorEvent } from '../base';
import { RtcAdapterBase, RtcAudioDeviceManagerBase, RtcChannelAdapterBase, RtcVideoDeviceManagerBase } from '../base';
import { SDK_CODEC, SDK_MODE } from 'agora-rtc-sdk-ng';
import { AgoraRteCameraThread, AgoraRteMicrophoneThread, AgoraRteScreenShareThread } from './thread';
import { AgoraRtcVideoCanvas } from '../../canvas';
import { AgoraRteVideoSourceType } from '../../../media/track';
import { AgoraRteWebClientMain, AgoraRteWebClientSub } from './client';
import { AGRtcConnectionType } from '../../channel';
import { AGScreenShareDevice, AGScreenShareType, NetworkStats, RtcState } from '../../type';
import { Injectable } from '../../../decorator/type';
import { ClientRole } from '../../../../type';
export interface RtcAdapterWebConfig {
    codec: SDK_CODEC;
    mode: SDK_MODE;
}
export declare class RtcAdapterWeb extends RtcAdapterBase {
    protected logger: Injectable.Logger;
    private _channels;
    private _vdm;
    private _adm;
    readonly cameraThread: AgoraRteCameraThread;
    readonly micThread: AgoraRteMicrophoneThread;
    readonly screenThread: AgoraRteScreenShareThread;
    readonly remoteCanvas: Map<string, AgoraRtcVideoCanvas>;
    private _audioPlayer;
    static defaultConfigs: RtcAdapterWebConfig;
    private _configs?;
    get configs(): RtcAdapterWebConfig;
    constructor(configs?: RtcAdapterWebConfig);
    createRtcChannel(channelName: string, base: RtcAdapterBase): RtcChannelAdapterBase;
    getVideoDeviceManager(): RtcVideoDeviceManagerBase;
    setVideoCameraDevice(deviceId: string): number;
    setAudioRecordingDevice(deviceId: string): number;
    setAudioPlaybackDevice(deviceId: string): number;
    getAudioDeviceManager(): RtcAudioDeviceManagerBase;
    getWindowDevices(): AGScreenShareDevice[];
    getDiaplayDevices(): AGScreenShareDevice[];
    isScreenDeviceEnumerateSupported(): boolean;
    enableLocalVideo(enable: boolean): number;
    enableLocalAudio(enable: boolean): number;
    setupLocalVideo(canvas: AgoraRtcVideoCanvas, videoSourceType: AgoraRteVideoSourceType): number;
    setupRemoteVideo(canvas: AgoraRtcVideoCanvas): number;
    startAudioRecordingDeviceTest(indicateInterval: number): number;
    stopAudioRecordingDeviceTest(): number;
    startAudioPlaybackDeviceTest(url: string): number;
    stopAudioPlaybackDeviceTest(): number;
    startScreenCapture(id?: string, type?: AGScreenShareType): number;
    stopScreenCapture(): number;
    onLocalAudioPlaybackTestVolumeChanged(cb: LocalAudioPlaybackVolumeIndicatorEvent): number;
    onLocalVideoTrackStateChanged(cb: LocalVideoTrackStateEvent): number;
    onLocalAudioTrackStateChanged(cb: LocalAudioTrackStateEvent): number;
    onLocalScreenShareTrackStateChanged(cb: LocalVideoTrackStateEvent): number;
    onLocalAudioVolume(cb: (volume: number) => void): number;
    setBeautyEffectOptions(enable: boolean, options: object): number;
    hasScreenSharePermission(): boolean;
    destroy(): number;
    static getRtcVersion(): string;
}
export declare class RtcChannelAdapterWeb extends RtcChannelAdapterBase {
    protected logger: Injectable.Logger;
    readonly main: AgoraRteWebClientMain;
    readonly sub: AgoraRteWebClientSub;
    channelName: string;
    constructor(channelName: string, configs: RtcAdapterWebConfig, base: RtcAdapterBase);
    getSessionId(): any;
    private client;
    join(token: string, streamUuid: string, connectionType: AGRtcConnectionType): Promise<void>;
    leave(connectionType?: AGRtcConnectionType): Promise<void>;
    setClientRole(role: ClientRole): number;
    muteLocalVideo(mute: boolean, connectionType: AGRtcConnectionType): number;
    muteLocalAudio(mute: boolean, connectionType: AGRtcConnectionType): number;
    muteLocalScreenShare(mute: boolean, connectionType: AGRtcConnectionType): number;
    muteRemoteVideo(streamUuid: string, mute: boolean): number;
    muteRemoteAudio(streamUuid: string, mute: boolean): number;
    onNetworkStats(cb: (stats: NetworkStats) => void): number;
    onAudioVolumeIndication(cb: (volumes: Map<string, number>) => void): number;
    onConnectionStateChanged(cb: (state: RtcState, connectionType: AGRtcConnectionType) => void): number;
}
