import type AgoraRtcEngine from 'agora-electron-sdk/types/AgoraSdk';
import { AgoraRteVideoSourceType } from '../../../media/track';
import { AgoraRtcVideoCanvas } from '../../canvas';
import { AGRtcConnectionType } from '../../channel';
import { AGScreenShareDevice, AGScreenShareType, BeautyEffect, NetworkStats, RtcState } from '../../type';
import { LocalVideoTrackStateEvent, LocalAudioTrackStateEvent, RtcAdapterBase, RtcAudioDeviceManagerBase, RtcChannelAdapterBase, RtcVideoDeviceManagerBase, LocalAudioPlaybackVolumeIndicatorEvent } from '../base';
import { AgoraRteElectronCameraThread } from './thread';
import { ChannelProfile, ClientRole } from '../../../../type';
import { Injectable } from '../../../decorator/type';
declare global {
    interface Window {
        main_pid: string;
    }
}
export interface RtcAdapterElectronConfig {
}
export declare class RtcAdapterElectron extends RtcAdapterBase {
    protected logger: Injectable.Logger;
    private _vdm;
    private _adm;
    static rtcEngine: AgoraRtcEngine;
    private static version?;
    private _channels;
    private _configs;
    private _screenEventBus;
    cameraThread: AgoraRteElectronCameraThread;
    private _localVideoEnabled;
    private _localAudioEnabled;
    static get remote(): any;
    screenShareId?: string;
    screenShareType?: AGScreenShareType;
    get configs(): {};
    get rtcEngine(): AgoraRtcEngine;
    constructor();
    createRtcChannel(channelName: string, base: RtcAdapterBase): RtcChannelAdapterBase;
    getVideoDeviceManager(): RtcVideoDeviceManagerBase;
    getAudioDeviceManager(): RtcAudioDeviceManagerBase;
    getWindowDevices(): AGScreenShareDevice[];
    getDiaplayDevices(): AGScreenShareDevice[];
    isScreenDeviceEnumerateSupported(): boolean;
    setVideoCameraDevice(deviceId: string): number;
    setAudioRecordingDevice(deviceId: string): number;
    setAudioPlaybackDevice(deviceId: string): number;
    enableLocalVideo(enable: boolean): number;
    enableLocalAudio(enable: boolean): number;
    setupLocalVideo(canvas: AgoraRtcVideoCanvas, videoSourceType: AgoraRteVideoSourceType): number;
    setupRemoteVideo(canvas: AgoraRtcVideoCanvas): number;
    startAudioRecordingDeviceTest(indicateInterval: number): number;
    stopAudioRecordingDeviceTest(): number;
    startAudioPlaybackDeviceTest(url: string): number;
    stopAudioPlaybackDeviceTest(): number;
    startScreenCapture(id?: string, type?: AGScreenShareType): number;
    stopScreenCapture(): number;
    onLocalAudioPlaybackTestVolumeChanged(cb: LocalAudioPlaybackVolumeIndicatorEvent): number;
    onLocalVideoTrackStateChanged(cb: LocalVideoTrackStateEvent): number;
    onLocalAudioTrackStateChanged(cb: LocalAudioTrackStateEvent): number;
    onLocalAudioVolume(cb: (volume: number) => void): number;
    onLocalScreenShareTrackStateChanged(cb: LocalVideoTrackStateEvent): number;
    setBeautyEffectOptions(enable: boolean, options: BeautyEffect): number;
    hasScreenSharePermission(): boolean;
    destroy(): number;
    static getRtcVersion(): string;
    static get logBasePath(): any;
    static get logFolderPath(): any;
    static get logPath(): any;
    private get _region();
    private _addEventListeners;
    private updateRole;
}
export declare class RtcChannelAdapterElectron extends RtcChannelAdapterBase {
    protected logger: Injectable.Logger;
    channelName: string;
    base: RtcAdapterElectron;
    private _networkStats;
    private get _channelProfile();
    constructor(channelName: string, configs: RtcAdapterElectronConfig, base: RtcAdapterBase);
    getSessionId(): string;
    onConnectionStateChanged(cb: (state: RtcState, connectionType: AGRtcConnectionType) => void): number;
    leave(connectionType?: AGRtcConnectionType): Promise<void>;
    setChannelProfile(profile: ChannelProfile): number;
    setClientRole(role: ClientRole): number;
    onNetworkStats(cb: (stats: NetworkStats) => void): number;
    onAudioVolumeIndication(cb: (volumes: Map<string, number>) => void): number;
    muteRemoteVideo(streamUuid: string, mute: boolean): number;
    muteRemoteAudio(streamUuid: string, mute: boolean): number;
    private _startScreenCapture;
    join(token: string, streamUuid: string, connectionType: AGRtcConnectionType): Promise<void>;
    muteLocalVideo(mute: boolean, connectionType: AGRtcConnectionType): number;
    muteLocalAudio(mute: boolean, connectionType: AGRtcConnectionType): number;
    muteLocalScreenShare(mute: boolean, connectionType: AGRtcConnectionType): number;
    private _getRtcState;
    private _addEventListeners;
}
