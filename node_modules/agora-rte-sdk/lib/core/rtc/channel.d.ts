import { ClientRole } from '../../type';
import { RtcChannelAdapterBase } from './adapter/base';
import { NetworkStats, RtcState } from './type';
export declare enum AGRtcConnectionType {
    main = 0,
    sub = 1
}
export declare class AGRtcChannel {
    channelName: string;
    private _adapter;
    constructor(channelName: string, adapter: RtcChannelAdapterBase);
    private connectionType;
    getRtcSid(): string;
    join(token: string, streamUuid: string, connectionType?: AGRtcConnectionType): Promise<void>;
    leave(connectionType?: AGRtcConnectionType): Promise<void>;
    setClientRole(role: ClientRole): number;
    muteLocalVideoStream(mute: boolean, connectionType?: AGRtcConnectionType): number;
    muteLocalAudioStream(mute: boolean, connectionType?: AGRtcConnectionType): number;
    muteLocalScreenStream(mute: boolean, connectionType?: AGRtcConnectionType): number;
    muteRemoteVideoStream(streamUuid: string, mute: boolean): number;
    muteRemoteAudioStream(streamUuid: string, mute: boolean): number;
    onNetworkStats(cb: (stats: NetworkStats) => void): number;
    onAudioVolumeIndication(cb: (volumes: Map<string, number>) => void): number;
    onConnectionStageChanged(cb: (state: RtcState, connectionType: AGRtcConnectionType) => void): number;
}
