export declare enum AGNetworkQuality {
    unknown = 99,
    bad = 1,
    poor = 2,
    good = 3,
    great = 4
}
export declare enum AGRteTrackErrorReason {
    Unknown = 0,
    PermissionDenied = 1
}
export interface NetworkStats {
    packetLoss?: number;
    networkQuality?: AGNetworkQuality;
    cpu?: number;
    cpuTotal?: number;
    delay?: number;
}
export declare enum AgoraRteMediaSourceState {
    /**
     * 设备停止采集
     */
    stopped = 0,
    /**
     * 设备开启中
     */
    starting = 2,
    /**
     * 设备已开启
     */
    started = 1,
    /**
     * 设备错误
     */
    error = -1
}
export declare enum RtcState {
    Idle = 0,
    Connecting = 1,
    Connected = 2,
    Reconnecting = 3
}
export interface AGRtcDeviceInfo {
    deviceid: string;
    devicename: string;
}
export interface AGVideoEncoderConfigurations {
    width: number;
    height: number;
    frameRate: number;
    bitrate: number;
}
export declare enum AGMediaEncryptionMode {
    /** 1: (Default) 128-bit AES encryption, XTS mode.
     */
    AES_128_XTS = 1,
    /** 2: 128-bit AES encryption, ECB mode.
     */
    AES_128_ECB = 2,
    /** 3: 256-bit AES encryption, XTS mode.
     */
    AES_256_XTS = 3,
    /** 4: Reserved property.
     */
    SM4_128_ECB = 4,
    /** 5: 128-bit AES encryption, GCM mode.
     *
     * @since v3.3.1
     */
    AES_128_GCM = 5,
    /** 6: 256-bit AES encryption, GCM mode.
     *
     * @since v3.3.1
     */
    AES_256_GCM = 6
}
export interface AGMediaEncryptionConfig {
    mode: AGMediaEncryptionMode;
    key: string;
}
export declare enum AGScreenShareType {
    Window = 0,
    Screen = 1
}
export interface AGScreenShareDevice {
    id: string;
    title: string;
    type: AGScreenShareType;
    image: Uint8Array;
    isCurrent?: boolean;
}
export declare enum AGRenderMode {
    fit = 0,
    fill = 1
}
export declare enum lighteningLevel {
    low = 0,
    normal = 1,
    height = 2
}
export interface BeautyEffect {
    lighteningContrastLevel: lighteningLevel;
    lighteningLevel: number;
    rednessLevel: number;
    smoothnessLevel: number;
}
