/// <reference types="node" />
import { AGRtmManager } from '../core/rtm';
import { AgoraRteLocalUser } from '../user';
import { RtmChannel } from 'agora-rtm-sdk';
import { EventEmitter } from 'events';
import { AGRtcManager } from '../core/rtc';
import { AGRtcChannel, AGRtcConnectionType } from '../core/rtc/channel';
import { AgoraRteSyncDataStore } from '../core/processor/channel-msg/data';
import { Injectable } from '../core/decorator/type';
export interface AgoraRteSceneJoinOptions {
    userName: string;
    userRole: string;
    streamId: string;
}
export interface AgoraRteSceneJoinRTCOptions {
    connectionType: AGRtcConnectionType;
    streamUuid: string;
    token: string;
}
export interface SceneObjects {
    rtc: AGRtcManager;
    rtcChannel: AGRtcChannel;
    rtm: AGRtmManager;
    rtmChannel: RtmChannel;
    rtmChannelObserver: EventEmitter;
}
export declare class AgoraRteScene extends EventEmitter {
    protected logger: Injectable.Logger;
    readonly sceneId: string;
    private _localUser?;
    private _sceneState;
    private _initialSync;
    get localUser(): AgoraRteLocalUser | undefined;
    readonly dataStore: AgoraRteSyncDataStore;
    private _rtmManager;
    private _rtcManager;
    private _rtmChannel;
    private _rtcChannel;
    private _rtmChannelObserver;
    private _synchronizer?;
    createTs?: number;
    constructor(sceneId: string, options: SceneObjects);
    get rtcSid(): string;
    get rtmSid(): string;
    joinScene(options: AgoraRteSceneJoinOptions): Promise<undefined>;
    leaveScene(): Promise<void>;
    joinRTC(options?: AgoraRteSceneJoinRTCOptions): Promise<void>;
    leaveRTC(connectionType?: AGRtcConnectionType): Promise<void>;
    private _cleanup;
    private _setRteConnectionState;
    private _setInitialSnapshotSync;
    private _recalculateRteState;
    private _addEventListeners;
    private _handleLocalStreamAdded;
    private _handleLocalStreamChanged;
    private _handleLocalStreamRemoved;
    private _handleRemoteStreamsAdded;
    private _handleRemoteStreamsChanged;
    private _handleRemoteStreamsRemoved;
    private _handleUserAdded;
    private _handleUserRemoved;
    private _handleRoomPropertyChange;
}
