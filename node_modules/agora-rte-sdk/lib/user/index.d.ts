import { AgoraRteMediaPublishState } from '../core/media/track';
import { AGRtcManager } from '../core/rtc';
import { AgoraRtcVideoCanvas } from '../core/rtc/canvas';
import { AGRtcConnectionType } from '../core/rtc/channel';
import { AgoraRteMediaSourceState } from '../core/rtc/type';
import { AgoraRteScene } from '../scene';
export declare class AgoraRteLocalUser {
    readonly userUuid: string;
    readonly userName: string;
    readonly userRole: string;
    readonly streamUuid: string;
    readonly sceneId: string;
    readonly rtcToken: string;
    private readonly _rtc;
    private readonly _scene;
    private _debouncedSyncVideo;
    private _debouncedSyncAudio;
    subStream?: {
        streamUuid: string;
        rtcToken: string;
    };
    constructor(scene: AgoraRteScene, { userUuid, userName, userRole, streamUuid, sceneId, rtcToken, rtc, }: {
        userUuid: string;
        userName: string;
        userRole: string;
        streamUuid: string;
        sceneId: string;
        rtcToken: string;
        rtc: AGRtcManager;
    });
    destroy(): void;
    private _addEventHandler;
    private _handleVideoTrackStateChange;
    private _handleAudioTrackStateChange;
    private _syncVideoSourceState;
    private _syncAudioSourceState;
    setSceneProperties(properties: any, cause: any): Promise<any>;
    deleteSceneProperties(properties: string[], cause: any): Promise<any>;
    setUserProperties(properties: any, cause: any): Promise<any>;
    deleteUserProperties(properties: string[], cause: any): Promise<any>;
    updateLocalMediaState({ videoSourceState, audioSourceState, }: {
        videoSourceState?: AgoraRteMediaSourceState;
        audioSourceState?: AgoraRteMediaSourceState;
    }, connectionType?: AGRtcConnectionType): Promise<any>;
    updateLocalMediaStream({ publishVideo, publishAudio, }: {
        publishVideo?: AgoraRteMediaPublishState;
        publishAudio?: AgoraRteMediaPublishState;
    }, connectionType?: AGRtcConnectionType): Promise<any>;
    updateRemoteMediaStream(userUuid: string, streamUuid: string, { publishVideo, publishAudio, }: {
        publishVideo?: AgoraRteMediaPublishState;
        publishAudio?: AgoraRteMediaPublishState;
    }, connectionType?: AGRtcConnectionType): Promise<any>;
    deleteLocalMediaStream(): Promise<any>;
    deleteLocalScreenStream(): Promise<any>;
    sendRoomMessage(message: string): Promise<any>;
    setupRemoteVideo(canvas: AgoraRtcVideoCanvas): void;
}
