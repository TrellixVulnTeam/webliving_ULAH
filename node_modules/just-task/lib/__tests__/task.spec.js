"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const task_1 = require("../task");
const undertaker_1 = require("../undertaker");
const JustTaskRegistry_1 = require("../JustTaskRegistry");
const logger_1 = require("../logger");
const yargs_1 = __importDefault(require("./__mocks__/yargs"));
const path_1 = __importDefault(require("path"));
describe('task', () => {
    beforeAll(() => {
        yargs_1.default.argv.config = path_1.default.resolve(__dirname, '__mocks__/just-task.js');
        jest.spyOn(logger_1.logger, 'info').mockImplementation(() => undefined);
    });
    beforeEach(() => {
        undertaker_1.undertaker.registry(new JustTaskRegistry_1.JustTaskRegistry());
    });
    afterAll(() => {
        yargs_1.default.argv.config = undefined;
        jest.restoreAllMocks();
    });
    it('allows synchronous tasks to be defined and be run', done => {
        const testFunction = jest.fn(() => { });
        task_1.task('test', function () {
            testFunction();
        });
        undertaker_1.parallel('test')(function () {
            expect(testFunction).toBeCalledTimes(1);
            done();
        });
    });
    it('allows callback-based tasks to be defined and be run', done => {
        const testFunction = jest.fn(() => { });
        task_1.task('test', function (cb) {
            testFunction();
            cb();
        });
        undertaker_1.parallel('test')(function () {
            expect(testFunction).toBeCalledTimes(1);
            done();
        });
    });
    it('allows promise-based tasks to be defined and be run', done => {
        const testFunction = jest.fn(() => { });
        task_1.task('test', function () {
            const result = testFunction();
            return Promise.resolve(result);
        });
        undertaker_1.parallel('test')(function () {
            expect(testFunction).toBeCalledTimes(1);
            done();
        });
    });
});
