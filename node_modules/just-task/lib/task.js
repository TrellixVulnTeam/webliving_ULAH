"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const undertaker_1 = require("./undertaker");
const wrapTask_1 = require("./wrapTask");
const just_task_logger_1 = require("just-task-logger");
const cache_1 = require("./cache");
function task(firstParam, secondParam, thirdParam) {
    const argCount = arguments.length;
    if (argCount === 1 && typeof firstParam === 'string') {
        return undertaker_1.undertaker.task(firstParam);
    }
    else if (argCount === 2 && isString(firstParam) && isString(secondParam)) {
        // task('default', 'build');
        const wrapped = wrapTask_1.wrapTask(undertaker_1.undertaker.series(secondParam));
        wrapped.cached = () => {
            cache_1.registerCachedTask(firstParam);
        };
        undertaker_1.undertaker.task(firstParam, wrapped);
        yargs_1.default.command(getCommandModule(firstParam, ''));
        return wrapped;
    }
    else if (argCount === 2 && isString(firstParam) && isTaskFunction(secondParam)) {
        // task('pretter', prettierTask());
        // task('custom', () => { ... });
        const wrapped = wrapTask_1.wrapTask(secondParam);
        wrapped.cached = () => {
            cache_1.registerCachedTask(firstParam);
        };
        undertaker_1.undertaker.task(firstParam, wrapped);
        yargs_1.default.command(getCommandModule(firstParam, ''));
        return wrapped;
    }
    else if (argCount === 3 && isString(firstParam) && isString(secondParam) && isTaskFunction(thirdParam)) {
        // task('custom', 'describes this thing', () => { ... })
        const wrapped = wrapTask_1.wrapTask(thirdParam);
        wrapped.cached = () => {
            cache_1.registerCachedTask(firstParam);
        };
        undertaker_1.undertaker.task(firstParam, wrapped);
        yargs_1.default.command(getCommandModule(firstParam, secondParam));
        return wrapped;
    }
    else {
        throw new Error('Invalid parameter given in task() function');
    }
}
exports.task = task;
function isString(param) {
    return typeof param === 'string';
}
function isTaskFunction(param) {
    return typeof param === 'function';
}
function getCommandModule(taskName, describe) {
    return Object.assign({ command: taskName, describe }, (taskName === 'default' ? { aliases: ['*'] } : {}), { handler(_argvParam) {
            if (cache_1.isCached(taskName)) {
                just_task_logger_1.logger.info(`Skipped ${taskName} since it was cached`);
                return;
            }
            return undertaker_1.undertaker.parallel(taskName)(() => {
                cache_1.saveCache(taskName);
            });
        } });
}
