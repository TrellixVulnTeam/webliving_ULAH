"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const logger_1 = require("./logger");
const undertaker_registry_1 = __importDefault(require("undertaker-registry"));
const resolve_1 = require("./resolve");
const enableTypeScript_1 = require("./enableTypeScript");
class JustTaskRegistry extends undertaker_registry_1.default {
    constructor() {
        super(...arguments);
        this.hasDefault = false;
    }
    init(taker) {
        super.init(taker);
        // uses a separate instance of yargs to first parse the config (without the --help in the way) so we can parse the configFile first regardless
        const configFile = [yargs_1.default.argv.config, './just.config.js', './just-task.js', './just.config.ts'].reduce((value, entry) => value || resolve_1.resolve(entry));
        logger_1.mark('registry:configModule');
        if (configFile && fs_1.default.existsSync(configFile)) {
            const ext = path_1.default.extname(configFile);
            if (ext === '.ts' || ext === '.tsx') {
                // TODO: add option to do typechecking as well
                enableTypeScript_1.enableTypeScript({ transpileOnly: true });
            }
            try {
                const configModule = require(configFile);
                if (typeof configModule === 'function') {
                    configModule();
                }
            }
            catch (e) {
                logger_1.logger.error(`Invalid configuration file: ${configFile}`);
                logger_1.logger.error(`Error: ${e.stack || e.message || e}`);
                process.exit(1);
            }
        }
        else {
            logger_1.logger.error(`Cannot find config file "${configFile}".`, `Please create a file called "just.config.js" in the root of the project next to "package.json".`);
        }
        logger_1.logger.perf('registry:configModule');
        if (!validateCommands(yargs_1.default)) {
            process.exit(1);
        }
        if (!this.hasDefault) {
            yargs_1.default.demandCommand(1, 'No default tasks are defined.').help();
        }
    }
    set(taskName, fn) {
        super.set(taskName, fn);
        if (taskName === 'default') {
            this.hasDefault = true;
        }
        return fn;
    }
}
exports.JustTaskRegistry = JustTaskRegistry;
function validateCommands(yargs) {
    const commandKeys = yargs.getCommandInstance().getCommands();
    const argv = yargs.argv;
    const unknown = [];
    const currentContext = yargs.getContext();
    if (commandKeys.length > 0) {
        argv._.slice(currentContext.commands.length).forEach((key) => {
            if (commandKeys.indexOf(key) === -1) {
                unknown.push(key);
            }
        });
    }
    if (unknown.length > 0) {
        logger_1.logger.error(`Unknown command: ${unknown.join(', ')}`);
        const recommended = recommendCommands(unknown[0], commandKeys);
        if (recommended) {
            logger_1.logger.info(`Did you mean this task name: ${recommended}?`);
        }
        return false;
    }
    return true;
}
function recommendCommands(cmd, potentialCommands) {
    const distance = require('yargs/lib/levenshtein');
    const threshold = 3; // if it takes more than three edits, let's move on.
    potentialCommands = potentialCommands.sort((a, b) => b.length - a.length);
    let recommended = null;
    let bestDistance = Infinity;
    for (let i = 0, candidate; (candidate = potentialCommands[i]) !== undefined; i++) {
        const d = distance(cmd, candidate);
        if (d <= threshold && d < bestDistance) {
            bestDistance = d;
            recommended = candidate;
        }
    }
    return recommended;
}
