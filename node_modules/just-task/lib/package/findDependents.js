"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const resolve_1 = require("../resolve");
const findPackageRoot_1 = require("./findPackageRoot");
const just_task_logger_1 = require("just-task-logger");
const findGitRoot_1 = require("./findGitRoot");
const paths_1 = require("../paths");
function findDependents() {
    just_task_logger_1.mark('cache:findDependents');
    const results = collectAllDependentPaths(findPackageRoot_1.findPackageRoot());
    just_task_logger_1.logger.perf('cache:findDependents');
    return results;
}
exports.findDependents = findDependents;
function getDepsPaths(pkgPath) {
    const gitRoot = findGitRoot_1.findGitRoot();
    const packageJsonFile = path_1.default.join(pkgPath, 'package.json');
    try {
        const packageJson = JSON.parse(fs_1.default.readFileSync(packageJsonFile).toString());
        let deps = [];
        deps = [
            ...deps,
            ...(packageJson.dependencies ? Object.keys(packageJson.dependencies) : []),
            ...(packageJson.devDependencies ? Object.keys(packageJson.devDependencies) : [])
        ];
        return deps
            .map(dep => {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            const depPackageJson = resolve_1.resolveCwd(path_1.default.join(dep, 'package.json'));
            if (!depPackageJson) {
                return null;
            }
            return { name: dep, path: path_1.default.dirname(fs_1.default.realpathSync(depPackageJson)) };
        })
            .filter(p => p && p.path.indexOf('node_modules') === -1 && paths_1.isChildOf(p.path, gitRoot));
    }
    catch (e) {
        just_task_logger_1.logger.error(`Invalid package.json detected at ${packageJsonFile} `, e);
        return [];
    }
}
function collectAllDependentPaths(pkgPath, collected = new Set()) {
    just_task_logger_1.mark(`collectAllDependentPaths:${pkgPath}`);
    const depPaths = getDepsPaths(pkgPath);
    depPaths.forEach(depPath => collected.add(depPath));
    for (const depPath of depPaths) {
        if (!collected.has(depPath)) {
            collectAllDependentPaths(depPath.path, collected);
        }
    }
    just_task_logger_1.logger.perf(`collectAllDependentPaths:${pkgPath}`);
    return collected;
}
