var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { InvisiblePlugin, AnimationMode, PlayerPhase, RoomPhase, isPlayer } from "white-web-sdk";
import { EventEmitter2 } from "eventemitter2";
import { times } from "./utils";
export var IframeEvents;
(function (IframeEvents) {
    IframeEvents["Init"] = "Init";
    IframeEvents["AttributesUpdate"] = "AttributesUpdate";
    IframeEvents["SetAttributes"] = "SetAttributes";
    IframeEvents["RegisterMagixEvent"] = "RegisterMagixEvent";
    IframeEvents["RemoveMagixEvent"] = "RemoveMagixEvent";
    IframeEvents["RemoveAllMagixEvent"] = "RemoveAllMagixEvent";
    IframeEvents["RoomStateChanged"] = "RoomStateChanged";
    IframeEvents["DispatchMagixEvent"] = "DispatchMagixEvent";
    IframeEvents["ReciveMagixEvent"] = "ReciveMagixEvent";
    IframeEvents["NextPage"] = "NextPage";
    IframeEvents["PrevPage"] = "PrevPage";
    IframeEvents["SDKCreate"] = "SDKCreate";
    IframeEvents["OnCreate"] = "OnCreate";
    IframeEvents["SetPage"] = "SetPage";
    IframeEvents["GetAttributes"] = "GetAttributes";
    IframeEvents["Ready"] = "Ready";
    IframeEvents["Destory"] = "Destory";
    IframeEvents["StartCreate"] = "StartCreate";
    IframeEvents["WrapperDidUpdate"] = "WrapperDidUpdate";
    IframeEvents["DispayIframe"] = "DispayIframe";
    IframeEvents["HideIframe"] = "HideIframe";
    IframeEvents["PageTo"] = "PageTo";
})(IframeEvents || (IframeEvents = {}));
export var DomEvents;
(function (DomEvents) {
    DomEvents["WrapperDidMount"] = "WrapperDidMount";
    DomEvents["IframeLoad"] = "IframeLoad";
})(DomEvents || (DomEvents = {}));
var position = "position: absolute;";
// 在某些安卓机型, border-width 不为 0 时，才能正确计算 iframe 里嵌套 iframe 的大小
var borderWidth = "border: 0.1px solid rgba(0,0,0,0);";
var left = "left: 0px;";
var top = "top: 0px;";
var IframeBridge = /** @class */ (function (_super) {
    __extends(IframeBridge, _super);
    function IframeBridge(context) {
        var _this = _super.call(this, context) || this;
        _this.iframe = null;
        _this.magixEventMap = new Map();
        _this.cssList = [];
        _this.allowAppliances = ["clicker"];
        _this.onPhaseChangedListener = function (phase) {
            if (phase === PlayerPhase.Playing) {
                _this.computedStyleAndIframeDisplay();
            }
        };
        _this.stateChangeListener = function (state) {
            _this.postMessage({ kind: IframeEvents.RoomStateChanged, payload: state });
            if (state.cameraState) {
                _this.computedStyle(state);
            }
            if (state.memberState) {
                _this.computedZindex();
                _this.updateStyle();
            }
            if (state.sceneState) {
                _this.computedIframeDisplay(state, _this.attributes);
            }
        };
        IframeBridge.displayer = context.displayer;
        return _this;
    }
    IframeBridge.onCreate = function (plugin) {
        IframeBridge.emitter.emit(IframeEvents.StartCreate);
        var attributes = plugin.attributes;
        if (attributes.url && attributes.height && attributes.width) {
            if (!IframeBridge.alreadyCreate) {
                plugin.insertByOnCreate(__assign(__assign({}, attributes), { displayer: this.displayer }));
            }
        }
        IframeBridge.emitter.emit(IframeEvents.OnCreate, plugin);
    };
    IframeBridge.prototype.onAttributesUpdate = function (attributes) {
        var _a;
        if (attributes.url) {
            var iframeSrc = (_a = this.iframe) === null || _a === void 0 ? void 0 : _a.src;
            if (iframeSrc && iframeSrc !== attributes.url) {
                this.listenIframe(attributes);
            }
        }
        if (attributes.displaySceneDir) {
            this.computedIframeDisplay(this.displayer.state, attributes);
        }
        if (attributes.width || attributes.height) {
            if (this.iframe) {
                this.iframe.width = attributes.width + "px";
                this.iframe.height = attributes.height + "px";
            }
        }
        this.postMessage({ kind: IframeEvents.AttributesUpdate, payload: attributes });
    };
    IframeBridge.prototype.onDestroy = function () {
        this._destory();
    };
    IframeBridge.insert = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var plugin, initAttributes, instance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        plugin = options.room.getInvisiblePlugin(IframeBridge.kind);
                        if (plugin) {
                            console.warn("plugin already inserted, can't re-insert");
                            return [2 /*return*/, plugin];
                        }
                        initAttributes = {
                            url: options.url,
                            width: options.width,
                            height: options.height,
                            displaySceneDir: options.displaySceneDir,
                            useClicker: options.useClicker || false,
                            useSelector: options.useSelector,
                        };
                        IframeBridge.alreadyCreate = true;
                        return [4 /*yield*/, options.room.createInvisiblePlugin(IframeBridge, initAttributes)];
                    case 1:
                        instance = _a.sent();
                        instance.baseInsert(options);
                        return [2 /*return*/, instance];
                }
            });
        });
    };
    IframeBridge.prototype.insertByOnCreate = function (options) {
        var instance = options.displayer.getInvisiblePlugin(IframeBridge.kind);
        instance.baseInsert(options);
    };
    IframeBridge.prototype.baseInsert = function (options) {
        var _this = this;
        var wrapperDidMountListener = function () {
            _this.getIframe();
            _this.listenIframe(options);
            _this.listenDisplayerState();
        };
        if (this.getIframe()) {
            wrapperDidMountListener();
        }
        else {
            IframeBridge.emitter.once(DomEvents.WrapperDidMount, wrapperDidMountListener);
            IframeBridge.emitter.once(IframeEvents.WrapperDidUpdate, wrapperDidMountListener);
        }
        if (this.attributes.useSelector) {
            this.allowAppliances.push("selector");
        }
        this.computedStyle(this.displayer.state);
        this.listenDisplayerCallbacks();
        this.getComputedIframeStyle();
        window.addEventListener("message", this.messageListener.bind(this));
        return this;
    };
    // 在某些安卓机型中会遇到 iframe 嵌套计算 bug，需要手动延迟触发一下重绘
    IframeBridge.prototype.getComputedIframeStyle = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.iframe) {
                getComputedStyle(_this.iframe);
            }
        }, 200);
    };
    IframeBridge.prototype.setAttributes = function (payload) {
        if (this.canOperation) {
            if (payload.url) {
                this.listenIframe(Object.assign(this.attributes, payload));
            }
            if (payload.displaySceneDir) {
                this.computedIframeDisplay(this.displayer.state, Object.assign(this.attributes, payload));
            }
            _super.prototype.setAttributes.call(this, payload);
        }
    };
    IframeBridge.prototype.destroy = function () {
        this._destory();
        _super.prototype.destroy.call(this);
    };
    IframeBridge.prototype.getIframe = function () {
        var iframe = document.getElementById(IframeBridge.kind);
        this.iframe = iframe;
        return iframe;
    };
    IframeBridge.prototype.setIframeSize = function (params) {
        if (this.iframe) {
            this.iframe.width = params.width + "px";
            this.iframe.height = params.height + "px";
            this.setAttributes({ width: params.width, height: params.height });
        }
    };
    IframeBridge.prototype.scaleIframeToFit = function (animationMode) {
        if (animationMode === void 0) { animationMode = AnimationMode.Immediately; }
        if (!this.inDisplaySceneDir) {
            return;
        }
        var x = -this.attributes.width / 2;
        var y = -this.attributes.height / 2;
        var width = this.attributes.width;
        var height = this.attributes.height;
        this.displayer.moveCameraToContain({
            originX: x,
            originY: y,
            width: width,
            height: height,
            animationMode: animationMode,
        });
    };
    IframeBridge.prototype.handleSetPage = function (data) {
        if (this.isReplay) {
            return;
        }
        var page = data.payload;
        var room = this.displayer;
        var scenes = room.entireScenes()[this.attributes.displaySceneDir];
        if (!scenes || scenes.length !== page) {
            var genScenes = times(page, function (index) { return ({ name: String(index + 1) }); });
            room.putScenes(this.attributes.displaySceneDir, genScenes);
            room.setScenePath(this.attributes.displaySceneDir);
        }
    };
    IframeBridge.prototype.listenIframe = function (options) {
        var _this = this;
        var iframe = document.getElementById(IframeBridge.kind);
        var loadListener = function (ev) {
            _this.postMessage({ kind: IframeEvents.Init, payload: {
                    attributes: _this.attributes,
                    roomState: IframeBridge.displayer.state,
                    currentPage: _this.currentPage,
                    observerId: _this.displayer.observerId
                } });
            IframeBridge.emitter.emit(DomEvents.IframeLoad, ev);
            IframeBridge.emitter.on(IframeEvents.Ready, function () {
                var _a;
                _this.postMessage((_a = _this.attributes.lastEvent) === null || _a === void 0 ? void 0 : _a.payload);
            });
            _this.computedStyleAndIframeDisplay();
        };
        if (iframe.src) {
            iframe.removeEventListener("load", loadListener);
        }
        this.iframe = iframe;
        iframe.src = options.url;
        iframe.width = options.width + "px";
        iframe.height = options.height + "px";
        iframe.addEventListener("load", loadListener);
    };
    IframeBridge.prototype.listenDisplayerState = function () {
        if (this.isReplay) {
            var firstPlay = false;
            if (this.displayer._phase === PlayerPhase.Playing) {
                this.computedStyleAndIframeDisplay();
                firstPlay = true;
            }
            this.displayer.callbacks.on("onPhaseChanged", this.onPhaseChangedListener);
        }
        this.computedStyleAndIframeDisplay();
    };
    IframeBridge.prototype.computedStyleAndIframeDisplay = function () {
        this.computedStyle(this.displayer.state);
        this.computedIframeDisplay(this.displayer.state, this.attributes);
    };
    IframeBridge.prototype.listenDisplayerCallbacks = function () {
        this.displayer.callbacks.on(this.callbackName, this.stateChangeListener);
    };
    Object.defineProperty(IframeBridge.prototype, "callbackName", {
        get: function () {
            return this.isReplay ? "onPlayerStateChanged" : "onRoomStateChanged";
        },
        enumerable: false,
        configurable: true
    });
    IframeBridge.prototype.computedStyle = function (state) {
        var cameraState = state.cameraState;
        if (this.iframe) {
            var width = cameraState.width, height = cameraState.height, scale = cameraState.scale, centerX = cameraState.centerX, centerY = cameraState.centerY;
            var transformOriginX = (width / 2) + "px";
            var transformOriginY = (height / 2) + "px";
            var transformOrigin = "transform-origin: " + transformOriginX + " " + transformOriginY + ";";
            var iframeXDiff = ((width - this.attributes.width) / 2) * scale;
            var iframeYDiff = ((height - this.attributes.height) / 2) * scale;
            var x = -(centerX * scale) + iframeXDiff;
            var y = -(centerY * scale) + iframeYDiff;
            var transform = "transform: translate(" + x + "px," + y + "px) scale(" + scale + ", " + scale + ");";
            var cssList = [position, borderWidth, top, left, transformOrigin, transform];
            this.cssList = cssList;
            this.computedZindex();
            this.updateStyle();
        }
    };
    IframeBridge.prototype.computedIframeDisplay = function (state, attributes) {
        if (!state.sceneState.scenePath.startsWith(attributes.displaySceneDir)) {
            IframeBridge.emitter.emit(IframeEvents.HideIframe);
        }
        else {
            IframeBridge.emitter.emit(IframeEvents.DispayIframe);
        }
    };
    IframeBridge.prototype.computedZindex = function () {
        var zIndexString = "z-index: -1;";
        var index = this.cssList.findIndex(function (css) { return css === zIndexString; });
        if (index !== -1) {
            this.cssList.splice(index, 1);
        }
        if (!this.isClicker() || this.isDisableInput) {
            this.cssList.push(zIndexString);
        }
    };
    IframeBridge.prototype.updateStyle = function () {
        if (this.iframe) {
            this.iframe.style.cssText = this.cssList.join(" ");
        }
    };
    IframeBridge.prototype.messageListener = function (event) {
        if (event.origin !== this.iframeOrigin) {
            return;
        }
        var data = event.data;
        switch (data.kind) {
            case IframeEvents.SetAttributes: {
                this.handleSetAttributes(data);
                break;
            }
            case IframeEvents.RegisterMagixEvent: {
                this.handleRegisterMagixEvent(data);
                break;
            }
            case IframeEvents.RemoveMagixEvent: {
                this.handleRemoveMagixEvent(data);
                break;
            }
            case IframeEvents.DispatchMagixEvent: {
                this.handleDispatchMagixEvent(data);
                break;
            }
            case IframeEvents.RemoveAllMagixEvent: {
                this.handleRemoveAllMagixEvent();
                break;
            }
            case IframeEvents.NextPage: {
                this.handleNextPage();
                break;
            }
            case IframeEvents.PrevPage: {
                this.handlePrevPage();
                break;
            }
            case IframeEvents.SDKCreate: {
                this.handleSDKCreate();
                break;
            }
            case IframeEvents.SetPage: {
                this.handleSetPage(data);
                break;
            }
            case IframeEvents.GetAttributes: {
                this.handleGetAttributes();
                break;
            }
            case IframeEvents.PageTo: {
                this.handlePageTo(data);
                break;
            }
            default: {
                // console.warn(`${data.kind} not allow event.`);
                break;
            }
        }
    };
    IframeBridge.prototype.handleSDKCreate = function () {
        this.postMessage({ kind: IframeEvents.Init, payload: {
                attributes: this.attributes,
                roomState: IframeBridge.displayer.state,
                currentPage: this.currentPage,
                observerId: this.displayer.observerId
            } });
    };
    IframeBridge.prototype.handleDispatchMagixEvent = function (data) {
        var eventPayload = data.payload;
        this.dispatchMagixEvent(eventPayload.event, eventPayload.payload);
    };
    IframeBridge.prototype.handleSetAttributes = function (data) {
        this.setAttributes(data.payload);
    };
    IframeBridge.prototype.handleRegisterMagixEvent = function (data) {
        var _this = this;
        var eventName = data.payload;
        var listener = function (event) {
            if (event.authorId === _this.displayer.observerId) {
                return;
            }
            _this.postMessage({ kind: IframeEvents.ReciveMagixEvent, payload: event });
        };
        this.magixEventMap.set(eventName, listener);
        this.displayer.addMagixEventListener(eventName, listener);
    };
    IframeBridge.prototype.handleRemoveMagixEvent = function (data) {
        var eventName = data.payload;
        var listener = this.magixEventMap.get(eventName);
        this.displayer.removeMagixEventListener(eventName, listener);
    };
    IframeBridge.prototype.handleNextPage = function () {
        if (this.canOperation) {
            var nextPageNum = this.currentPage + 1;
            if (nextPageNum > this.totalPage) {
                return;
            }
            this.displayer.setSceneIndex(nextPageNum - 1);
            this.dispatchMagixEvent(IframeEvents.NextPage, {});
        }
    };
    IframeBridge.prototype.handlePrevPage = function () {
        if (this.canOperation) {
            var prevPageNum = this.currentPage - 1;
            if (prevPageNum < 0) {
                return;
            }
            this.displayer.setSceneIndex(prevPageNum - 1);
            this.dispatchMagixEvent(IframeEvents.PrevPage, {});
        }
    };
    IframeBridge.prototype.handlePageTo = function (data) {
        if (this.canOperation) {
            var page = data.payload;
            if (!Number.isSafeInteger(page) || page <= 0) {
                return;
            }
            var index = page - 1;
            this.displayer.setSceneIndex(index);
            this.dispatchMagixEvent(IframeEvents.PageTo, index);
        }
    };
    IframeBridge.prototype.handleRemoveAllMagixEvent = function () {
        var _this = this;
        this.magixEventMap.forEach(function (listener, event) {
            _this.displayer.removeMagixEventListener(event, listener);
        });
        this.magixEventMap.clear();
    };
    IframeBridge.prototype.handleGetAttributes = function () {
        this.postMessage({
            kind: IframeEvents.GetAttributes,
            payload: this.attributes,
        });
    };
    IframeBridge.prototype.postMessage = function (message) {
        var _a;
        if (this.iframe) {
            (_a = this.iframe.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(message, "*");
        }
    };
    IframeBridge.prototype.dispatchMagixEvent = function (event, payload) {
        if (this.canOperation) {
            _super.prototype.setAttributes.call(this, { lastEvent: { name: event, payload: payload } });
            this.displayer.dispatchMagixEvent(event, payload);
        }
    };
    Object.defineProperty(IframeBridge.prototype, "currentIndex", {
        get: function () {
            return this.displayer.state.sceneState.index;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IframeBridge.prototype, "currentPage", {
        get: function () {
            return this.currentIndex + 1;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IframeBridge.prototype, "totalPage", {
        get: function () {
            return this.displayer.state.sceneState.scenes.length;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IframeBridge.prototype, "readonly", {
        get: function () {
            return !this.displayer.isWritable;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IframeBridge.prototype, "isReplay", {
        get: function () {
            return isPlayer(this.displayer);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IframeBridge.prototype, "inDisplaySceneDir", {
        get: function () {
            return this.displayer.state.sceneState.scenePath.startsWith(this.attributes.displaySceneDir);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IframeBridge.prototype, "canOperation", {
        get: function () {
            if (this.isReplay) {
                return false;
            }
            if (this.readonly) {
                return false;
            }
            return this.displayer.phase === RoomPhase.Connected;
        },
        enumerable: false,
        configurable: true
    });
    IframeBridge.prototype.isClicker = function () {
        if (this.readonly) {
            return false;
        }
        var currentApplianceName = this.displayer.state.memberState.currentApplianceName;
        return this.allowAppliances.includes(currentApplianceName);
    };
    Object.defineProperty(IframeBridge.prototype, "isDisableInput", {
        get: function () {
            if ("disableDeviceInputs" in this.displayer) {
                return this.displayer.disableDeviceInputs;
            }
            else {
                return true;
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IframeBridge.prototype, "iframeOrigin", {
        get: function () {
            if (this.iframe) {
                var url = new URL(this.iframe.src);
                return url.origin;
            }
            else {
                return undefined;
            }
        },
        enumerable: false,
        configurable: true
    });
    IframeBridge.prototype._destory = function () {
        var _this = this;
        window.removeEventListener("message", this.messageListener);
        this.magixEventMap.forEach(function (listener, event) {
            _this.displayer.removeMagixEventListener(event, listener);
        });
        this.displayer.callbacks.off(this.callbackName, this.stateChangeListener);
        this.displayer.callbacks.off("onPhaseChanged", this.onPhaseChangedListener);
        this.magixEventMap.clear();
        if (this.iframe) {
            IframeBridge.emitter.emit(IframeEvents.Destory);
            this.iframe = null;
            IframeBridge.alreadyCreate = false;
        }
    };
    IframeBridge.kind = "IframeBridge";
    IframeBridge.emitter = new EventEmitter2();
    IframeBridge.alreadyCreate = false;
    return IframeBridge;
}(InvisiblePlugin));
export { IframeBridge };
export * from "./iframeWrapper";
//# sourceMappingURL=index.js.map