import { InvisiblePlugin, InvisiblePluginContext, Displayer, Room, AnimationMode } from "white-web-sdk";
import { EventEmitter2 } from "eventemitter2";
export declare type IframeBridgeAttributes = {
    readonly url: string;
    readonly width: number;
    readonly height: number;
    readonly displaySceneDir: string;
    readonly lastEvent?: {
        name: string;
        payload: any;
    };
    readonly useClicker?: boolean;
    readonly useSelector?: boolean;
};
export declare type IframeSize = {
    readonly width: number;
    readonly height: number;
};
export declare type InsertOptions = {
    readonly room: Room;
    readonly useClicker?: boolean;
    readonly useSelector?: boolean;
} & BaseOption;
declare type BaseOption = {
    readonly url: string;
    readonly width: number;
    readonly height: number;
    readonly displaySceneDir: string;
};
declare type OnCreateInsertOption = {
    readonly displayer: Displayer;
} & BaseOption;
export declare enum IframeEvents {
    Init = "Init",
    AttributesUpdate = "AttributesUpdate",
    SetAttributes = "SetAttributes",
    RegisterMagixEvent = "RegisterMagixEvent",
    RemoveMagixEvent = "RemoveMagixEvent",
    RemoveAllMagixEvent = "RemoveAllMagixEvent",
    RoomStateChanged = "RoomStateChanged",
    DispatchMagixEvent = "DispatchMagixEvent",
    ReciveMagixEvent = "ReciveMagixEvent",
    NextPage = "NextPage",
    PrevPage = "PrevPage",
    SDKCreate = "SDKCreate",
    OnCreate = "OnCreate",
    SetPage = "SetPage",
    GetAttributes = "GetAttributes",
    Ready = "Ready",
    Destory = "Destory",
    StartCreate = "StartCreate",
    WrapperDidUpdate = "WrapperDidUpdate",
    DispayIframe = "DispayIframe",
    HideIframe = "HideIframe",
    PageTo = "PageTo"
}
export declare enum DomEvents {
    WrapperDidMount = "WrapperDidMount",
    IframeLoad = "IframeLoad"
}
export declare class IframeBridge extends InvisiblePlugin<IframeBridgeAttributes> {
    static readonly kind: string;
    static emitter: EventEmitter2;
    private static displayer;
    private static alreadyCreate;
    iframe: HTMLIFrameElement | null;
    private readonly magixEventMap;
    private cssList;
    private allowAppliances;
    constructor(context: InvisiblePluginContext);
    static onCreate(plugin: IframeBridge): void;
    onAttributesUpdate(attributes: IframeBridgeAttributes): void;
    onDestroy(): void;
    static insert(options: InsertOptions): Promise<IframeBridge>;
    insertByOnCreate(options: OnCreateInsertOption): void;
    baseInsert(options: BaseOption): IframeBridge;
    private getComputedIframeStyle;
    setAttributes(payload: any): void;
    destroy(): void;
    private getIframe;
    setIframeSize(params: IframeSize): void;
    scaleIframeToFit(animationMode?: AnimationMode): void;
    private handleSetPage;
    private listenIframe;
    private onPhaseChangedListener;
    private listenDisplayerState;
    private computedStyleAndIframeDisplay;
    private listenDisplayerCallbacks;
    private get callbackName();
    private stateChangeListener;
    private computedStyle;
    private computedIframeDisplay;
    computedZindex(): void;
    private updateStyle;
    private messageListener;
    private handleSDKCreate;
    private handleDispatchMagixEvent;
    private handleSetAttributes;
    private handleRegisterMagixEvent;
    private handleRemoveMagixEvent;
    private handleNextPage;
    private handlePrevPage;
    private handlePageTo;
    private handleRemoveAllMagixEvent;
    private handleGetAttributes;
    postMessage(message: any): void;
    dispatchMagixEvent(event: string, payload: any): void;
    private get currentIndex();
    private get currentPage();
    private get totalPage();
    private get readonly();
    private get isReplay();
    get inDisplaySceneDir(): boolean;
    private get canOperation();
    private isClicker;
    private get isDisableInput();
    private get iframeOrigin();
    private _destory;
}
export * from "./iframeWrapper";
//# sourceMappingURL=index.d.ts.map