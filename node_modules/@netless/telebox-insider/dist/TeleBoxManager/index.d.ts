import type { TeleBoxConfig, TeleBoxRect, TeleBoxState } from "../TeleBox/typings";
import { TeleBoxCollector } from "../TeleBoxCollector";
import { ReadonlyTeleBox, TeleBox } from "../TeleBox";
import type { TeleBoxManagerConfig, TeleBoxManagerCreateConfig, TeleBoxManagerEvents, TeleBoxManagerQueryConfig, TeleBoxManagerUpdateConfig } from "./typings";
import { MaxTitleBar } from "./MaxTitleBar";
import { TeleBoxColorScheme } from "..";
import { SideEffectManager } from "side-effect-manager";
import { Val, ValEnhancedResult } from "value-enhancer";
export * from "./typings";
export * from "./constants";
declare type ValConfig = {
    prefersColorScheme: Val<TeleBoxColorScheme, boolean>;
    containerRect: Val<TeleBoxRect, boolean>;
    collector: Val<TeleBoxCollector | null>;
    readonly: Val<boolean, boolean>;
    minimized: Val<boolean, boolean>;
    maximized: Val<boolean, boolean>;
    fence: Val<boolean, boolean>;
};
export interface TeleBoxManager extends ValEnhancedResult<ValConfig> {
}
export declare class TeleBoxManager {
    constructor({ root, prefersColorScheme, minimized, maximized, fence, containerRect, collector, namespace, zIndex, readonly, }?: TeleBoxManagerConfig);
    readonly events: TeleBoxManagerEvents;
    protected _sideEffect: SideEffectManager;
    protected root: HTMLElement;
    readonly namespace: string;
    zIndex: number;
    _darkMode$: Val<boolean, boolean>;
    get darkMode(): boolean;
    _state$: Val<TeleBoxState, boolean>;
    get state(): TeleBoxState;
    /** @deprecated use setMaximized and setMinimized instead */
    setState(state: TeleBoxState, skipUpdate?: boolean): this;
    create(config?: TeleBoxManagerCreateConfig): ReadonlyTeleBox;
    query(config?: TeleBoxManagerQueryConfig): ReadonlyTeleBox[];
    queryOne(config?: TeleBoxManagerQueryConfig): ReadonlyTeleBox | undefined;
    update(boxID: string, config: TeleBoxManagerUpdateConfig, skipUpdate?: boolean): void;
    updateAll(config: TeleBoxManagerUpdateConfig, skipUpdate?: boolean): void;
    remove(boxID: string, skipUpdate?: boolean): ReadonlyTeleBox | undefined;
    removeAll(skipUpdate?: boolean): ReadonlyTeleBox[];
    destroy(skipUpdate?: boolean): void;
    wrapClassName(className: string): string;
    protected maxTitleBar: MaxTitleBar;
    protected _focusedBox: TeleBox | undefined;
    protected boxes: TeleBox[];
    protected lastState: TeleBoxState | undefined;
    protected teleBoxMatcher(config: TeleBoxManagerQueryConfig): (box: TeleBox) => boolean;
    protected updateBox(box: TeleBox, config: TeleBoxManagerUpdateConfig, skipUpdate?: boolean): void;
    protected focusBox({ focus, box, skipUpdate, increaseZIndex, }: {
        focus: boolean;
        box: TeleBox;
        skipUpdate?: boolean;
        increaseZIndex?: boolean;
    }): void;
    protected getInitialPosition(width: number, height: number): {
        x: number;
        y: number;
    };
    protected wrapCreateConfig(config?: TeleBoxConfig): TeleBoxConfig;
}
