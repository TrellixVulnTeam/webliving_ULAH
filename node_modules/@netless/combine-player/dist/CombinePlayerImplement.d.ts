import { VideoJsPlayer } from "video.js";
import { Player } from "white-web-sdk";
import { CombinePlayer, StatusChangeHandle, TimeDuration, VideoOptions } from "./Types";
import { PublicCombinedStatus } from "./StatusContant";
import { EventEmitter } from "./EventEmitter";
export declare class CombinePlayerImplement implements CombinePlayer {
    private readonly video;
    private readonly whiteboard;
    private readonly videoOptions;
    private readonly stateMachine;
    private _playbackRate;
    private seekTime;
    private triggerSource;
    private currentCombineStatus;
    private readonly whiteboardEmitter;
    private readonly taskQueue;
    private onStatusChangeHandleList;
    constructor(config: Config);
    setOnStatusChange(cb: StatusChangeHandle): void;
    removeStatusChange(cb: StatusChangeHandle): void;
    removeAllStatusChange(): void;
    getStatus(): PublicCombinedStatus;
    get combinedStatus(): PublicCombinedStatus;
    playbackSpeed(rate: number): void;
    set playbackRate(rate: number);
    get playbackRate(): number;
    get timeDuration(): TimeDuration;
    stop(): void;
    play(): Promise<void>;
    pause(): Promise<void>;
    seek(ms: number): Promise<void>;
    private initVideo;
    private initVideoJSEvents;
    private initWhiteboard;
    private initWhiteboardIsPlayable;
    private initWhiteboardEvents;
    private playWhenPause;
    private playWhenVideoIsPauseAndWhiteboardIsPauseBuffering;
    private playWhenAllPlayerIsPauseBuffering;
    private playWhenEnded;
    private pauseWhenPlaying;
    private seekWhenPlaying;
    private seekWhenPause;
    private seekWhenPauseFinallyIsEnded;
    private pauseWhiteboardWhenVideoWaiting;
    private playingWhiteboardWhenVideoPlayingDropFrame;
    private playingWhiteboardWhenVideoPlaying;
    private pauseVideoWhenWhiteboardBuffering;
    private playingVideoWhenWhiteboardPlaying;
    private pauseVideoWhenWhiteboardEnded;
    private pauseWhiteboardWhenVideoEnded;
    private releaseEvents;
    private initOnCrashByDisabledStatusCallback;
    private onStatusUpdate;
    private getPlayerDuration;
    private isNotResponse;
    private checkVideoAutoPlay;
}
declare type Config = {
    videoConfig: {
        videoOptions: VideoOptions;
        video: VideoJsPlayer;
        isCanplay: boolean;
    };
    whiteboard: Player;
    whiteboardEmitter: EventEmitter;
    debug: boolean;
};
export {};
