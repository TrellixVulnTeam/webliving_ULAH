import { AtomPlayerSource, AtomPlayerStatus, CombinePlayerStatus } from "./StatusContant";
import { AnyFunction, AtomPlayerStatusCompose, AtomPlayerStatusPair, AtomPlayerStatusTransfer, CombinePlayerStatusTransfer } from "./Types";
export declare class StateMachine {
    private readonly videoStatus;
    private readonly whiteboardStatus;
    private readonly statusLockInfo;
    private readonly events;
    private readonly table;
    private readonly debug;
    private statusIgnoreCrashByDisabled;
    private statusIgnoreCrashByDisabledCallback;
    constructor(debug: boolean);
    one(eventName: CombinePlayerStatus, cb?: OnStatusUpdate): Promise<AtomPlayerStatusCompose>;
    setOnCrashByDisabledStatus(crashHandler: AnyFunction): Promise<void>;
    oneButNotCrashByDisabled(statusIgnoreCrashByDisabled: AtomPlayerStatusPair[], cb?: OnStatusUpdate): Promise<AtomPlayerStatusCompose>;
    cancelOneButNotCrashByDisabled(): void;
    on(eventName: CombinePlayerStatus, cb: OnStatusUpdate): Promise<void>;
    off(eventName: CombinePlayerStatus | CombinePlayerStatus[]): void;
    destroy(): void;
    setStatus(source: AtomPlayerSource, status: AtomPlayerStatus): void;
    lockCombineStatus(allowStatusList: CombinePlayerStatus[], unLockStatusList: CombinePlayerStatus[]): void;
    getCombinationStatus(): CombinePlayerStatusTransfer;
    getStatus(source: AtomPlayerSource): AtomPlayerStatusTransfer;
    private shouldCrash;
    private unlockCombineStatus;
    private setPreviousStatus;
    private dispatchEvent;
    private initTables;
}
declare type OnStatusUpdate = ({ previous, current, }: {
    previous: AtomPlayerStatusPair;
    current: AtomPlayerStatusPair;
}) => Promise<void>;
export {};
