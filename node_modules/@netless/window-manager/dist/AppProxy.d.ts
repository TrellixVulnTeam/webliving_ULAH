import Emittery from "emittery";
import type { AppEmitterEvent, AppInitState, BaseInsertParams } from "./index";
import type { SceneState, View, SceneDefinition } from "white-web-sdk";
import type { AppManager } from "./AppManager";
import type { NetlessApp } from "./typings";
import type { ReadonlyTeleBox } from "@netless/telebox-insider";
import { Base } from "./Base";
export declare class AppProxy extends Base {
    private params;
    id: string;
    scenePath?: string;
    appEmitter: Emittery<AppEmitterEvent>;
    scenes?: SceneDefinition[];
    private appListener;
    private boxManager;
    private appProxies;
    private viewManager;
    private cameraStore;
    private kind;
    isAddApp: boolean;
    private status;
    constructor(params: BaseInsertParams, manager: AppManager, appId: string, isAddApp: boolean);
    private initScenes;
    get view(): View | undefined;
    get isWritable(): boolean;
    get attributes(): any;
    get appAttributes(): import("./index").AppSyncAttributes;
    getFullScenePath(): string | undefined;
    setFullPath(path: string): void;
    baseInsertApp(skipUpdate?: boolean, focus?: boolean): Promise<{
        appId: string;
        app: NetlessApp;
    }>;
    private focusApp;
    get box(): ReadonlyTeleBox | undefined;
    focusBox(): void;
    private setupApp;
    private fixMobileSize;
    private afterSetupApp;
    onSeek(time: number): void;
    onReconnected(): Promise<void>;
    switchToWritable(): void;
    getAppInitState: (id: string) => AppInitState | undefined;
    emitAppSceneStateChange(sceneState: SceneState): void;
    emitAppIsWritableChange(): void;
    private makeAppEventListener;
    private appAttributesUpdateListener;
    setScenePath(): void;
    setViewFocusScenePath(): void;
    private createView;
    destroy(needCloseBox: boolean, cleanAttrs: boolean, skipUpdate: boolean, error?: Error): Promise<void>;
    close(): Promise<void>;
}
