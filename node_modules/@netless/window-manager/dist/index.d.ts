import Emittery from "emittery";
import { AppManager } from "./AppManager";
import { CursorManager } from "./Cursor";
import "./style.css";
import "@netless/telebox-insider/dist/style.css";
import type { TELE_BOX_STATE } from "./BoxManager";
import type { Apps } from "./AttributesDelegate";
import { InvisiblePlugin, ViewMode } from "white-web-sdk";
import type { Displayer, SceneDefinition, View, Room, InvisiblePluginContext, Camera, AnimationMode, CameraBound, Point, Rectangle, ViewVisionMode, CameraState } from "white-web-sdk";
import type { AppListeners } from "./AppListener";
import type { NetlessApp, RegisterParams } from "./typings";
import type { TeleBoxColorScheme, TeleBoxState } from "@netless/telebox-insider";
import type { AppProxy } from "./AppProxy";
export declare type WindowMangerAttributes = {
    modelValue?: string;
    boxState: TELE_BOX_STATE;
    maximized?: boolean;
    minimized?: boolean;
    [key: string]: any;
};
export declare type apps = {
    [key: string]: NetlessApp;
};
export declare type AddAppOptions = {
    scenePath?: string;
    title?: string;
    scenes?: SceneDefinition[];
};
export declare type setAppOptions = AddAppOptions & {
    appOptions?: any;
};
export declare type AddAppParams = {
    kind: string;
    src?: string;
    options?: AddAppOptions;
    attributes?: any;
};
export declare type BaseInsertParams = {
    kind: string;
    src?: string;
    options?: AddAppOptions;
    attributes?: any;
    isDynamicPPT?: boolean;
};
export declare type AppSyncAttributes = {
    kind: string;
    src?: string;
    options: any;
    state?: any;
    isDynamicPPT?: boolean;
    fullPath?: string;
};
export declare type AppInitState = {
    id: string;
    x?: number;
    y?: number;
    width?: number;
    height?: number;
    focus?: boolean;
    maximized?: boolean;
    minimized?: boolean;
    sceneIndex?: number;
    boxState?: TeleBoxState;
};
export declare type EmitterEvent = {
    onCreated: undefined;
    InitReplay: AppInitState;
    move: {
        appId: string;
        x: number;
        y: number;
    };
    focus: {
        appId: string;
    };
    close: {
        appId: string;
    };
    resize: {
        appId: string;
        width: number;
        height: number;
        x?: number;
        y?: number;
    };
    error: Error;
    seek: number;
    mainViewMounted: undefined;
    observerIdChange: number;
    boxStateChange: string;
    playgroundSizeChange: DOMRect;
};
export declare const emitter: Emittery<EmitterEvent>;
export declare type PublicEvent = {
    mainViewModeChange: ViewVisionMode;
    boxStateChange: `${TELE_BOX_STATE}`;
    darkModeChange: boolean;
    prefersColorSchemeChange: TeleBoxColorScheme;
    cameraStateChange: CameraState;
};
export declare type MountParams = {
    room: Room;
    container: HTMLElement;
    /** 白板高宽比例, 默认为 9 / 16 */
    containerSizeRatio?: number;
    /** 显示 PS 透明背景，默认 true */
    chessboard?: boolean;
    collectorContainer?: HTMLElement;
    collectorStyles?: Partial<CSSStyleDeclaration>;
    overwriteStyles?: string;
    cursor?: boolean;
    debug?: boolean;
    disableCameraTransform?: boolean;
    prefersColorScheme?: TeleBoxColorScheme;
};
export declare const callbacks: Emittery<PublicEvent>;
export declare class WindowManager extends InvisiblePlugin<WindowMangerAttributes> {
    static kind: string;
    static displayer: Displayer;
    static wrapper?: HTMLElement;
    static playground?: HTMLElement;
    static container?: HTMLElement;
    static debug: boolean;
    static containerSizeRatio: number;
    private static isCreated;
    version: string;
    appListeners?: AppListeners;
    readonly?: boolean;
    emitter: Emittery<PublicEvent>;
    appManager?: AppManager;
    cursorManager?: CursorManager;
    viewMode: ViewMode;
    isReplay: boolean;
    constructor(context: InvisiblePluginContext);
    /**
     * 挂载 WindowManager
     * @deprecated
     */
    static mount(room: Room, container: HTMLElement, collectorContainer?: HTMLElement, options?: {
        chessboard: boolean;
        containerSizeRatio: number;
        collectorStyles?: Partial<CSSStyleDeclaration>;
        debug?: boolean;
        overwriteStyles?: string;
    }): Promise<WindowManager>;
    static mount(params: MountParams): Promise<WindowManager>;
    private static initManager;
    /**
     * 注册插件
     */
    static register<AppOptions = any, SetupResult = any, Attributes = any>(params: RegisterParams<AppOptions, SetupResult, Attributes>): Promise<void>;
    /**
     * 创建一个 app 至白板
     */
    addApp(params: AddAppParams): Promise<string | undefined>;
    private setupScenePath;
    /**
     * 设置 mainView 的 ScenePath, 并且切换白板为可写状态
     */
    setMainViewScenePath(scenePath: string): Promise<void>;
    /**
     * 设置 mainView 的 SceneIndex, 并且切换白板为可写状态
     */
    setMainViewSceneIndex(index: number): Promise<void>;
    /**
     * 返回 mainView 的 ScenePath
     */
    getMainViewScenePath(): string;
    /**
     * 返回 mainView 的 SceneIndex
     */
    getMainViewSceneIndex(): number;
    /**
     * 设置所有 app 的 readonly 模式
     */
    setReadonly(readonly: boolean): void;
    /**
     * 切换 mainView 为可写
     */
    switchMainViewToWriter(): Promise<void> | undefined;
    /**
     * app destroy 回调
     */
    onAppDestroy(kind: string, listener: (error: Error) => void): void;
    /**
     * 设置 ViewMode
     */
    setViewMode(mode: ViewMode): void;
    get mainView(): View;
    get camera(): Camera;
    get cameraState(): CameraState;
    get apps(): Apps | undefined;
    get boxState(): TeleBoxState;
    get darkMode(): boolean;
    get prefersColorScheme(): TeleBoxColorScheme;
    /**
     * 查询所有的 App
     */
    queryAll(): AppProxy[];
    /**
     * 查询单个 App
     */
    queryOne(appId: string): AppProxy | undefined;
    /**
     * 关闭 APP
     */
    closeApp(appId: string): Promise<void>;
    moveCamera(camera: Partial<Camera> & {
        animationMode?: AnimationMode | undefined;
    }): void;
    moveCameraToContain(rectangle: Rectangle & Readonly<{
        animationMode?: AnimationMode;
    }>): void;
    convertToPointInWorld(point: Point): Point;
    setCameraBound(cameraBound: CameraBound): void;
    onDestroy(): void;
    destroy(): void;
    private _destroy;
    private bindMainView;
    get canOperate(): boolean;
    get room(): Room;
    safeSetAttributes(attributes: any): void;
    safeUpdateAttributes(keys: string[], value: any): void;
    setPrefersColorScheme(scheme: TeleBoxColorScheme): void;
    private isDynamicPPT;
    private static checkVersion;
    private ensureAttributes;
    private containerResizeObserver?;
    private observePlaygroundSize;
    private updateSizer;
}
export declare const BuiltinApps: {
    DocsViewer: string;
    MediaPlayer: string;
};
export * from "./typings";
export { WhiteWindowSDK } from "./sdk";
