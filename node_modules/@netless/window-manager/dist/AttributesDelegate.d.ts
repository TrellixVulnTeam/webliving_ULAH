import { AppAttributes } from "./constants";
import type { AddAppParams, AppSyncAttributes } from "./index";
import type { Camera, Size } from "white-web-sdk";
import type { AppManager } from "./AppManager";
import type { Cursor } from "./Cursor/Cursor";
export declare enum Fields {
    Apps = "apps",
    Focus = "focus",
    State = "state",
    BoxState = "boxState",
    MainViewCamera = "mainViewCamera",
    MainViewSize = "mainViewSize",
    Broadcaster = "broadcaster",
    Cursors = "cursors",
    Position = "position",
    CursorState = "cursorState",
    FullPath = "fullPath"
}
export declare type Apps = {
    [key: string]: AppSyncAttributes;
};
export declare type Position = {
    x: number;
    y: number;
    type: PositionType;
    id?: string;
};
export declare type PositionType = "main" | "app";
export declare class AttributesDelegate {
    private manager;
    constructor(manager: AppManager);
    apps(): Apps;
    get focus(): string | undefined;
    getAppAttributes(id: string): AppSyncAttributes;
    getAppState(id: string): any;
    getMaximized(): boolean | undefined;
    setupAppAttributes(params: AddAppParams, id: string, isDynamicPPT: boolean): void;
    updateAppState(appId: string, stateName: AppAttributes, state: any): void;
    cleanAppAttributes(id: string): void;
    cleanFocus(): void;
    getAppSceneIndex(id: string): any;
    getAppScenePath(id: string): any;
    getMainViewScenePath(): any;
    getMainViewSceneIndex(): any;
    getBoxState(): import("@netless/telebox-insider").TELE_BOX_STATE;
    setMainViewScenePath(scenePath: string): void;
    setMainViewSceneIndex(index: number): void;
    getMainViewCamera(): MainViewCamera;
    getMainViewSize(): MainViewSize;
    setMainViewCamera(camera: Camera & {
        id: string;
    } | undefined): void;
    setMainViewSize(size: Size & {
        id: string;
    } | undefined): void;
    setAppFocus(appId: string, focus: boolean): void;
    updateCursor(uid: string, position: Position): void;
    updateCursorState(uid: string, cursorState: string | undefined): void;
    getCursorState(uid: string): any;
    cleanCursor(uid: string): void;
    setMainViewFocusPath(): void;
}
export declare type MainViewSize = {
    id: string;
    width: number;
    height: number;
};
export declare type MainViewCamera = {
    id: string;
    centerX: number;
    centerY: number;
    scale: number;
};
export declare type Cursors = {
    [key: string]: Cursor;
};
