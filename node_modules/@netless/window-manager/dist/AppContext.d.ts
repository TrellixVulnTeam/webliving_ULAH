import { autorun, listenDisposed, listenUpdated, reaction, unlistenDisposed, unlistenUpdated, toJS } from 'white-web-sdk';
import type { Room, SceneDefinition, View } from "white-web-sdk";
import type { ReadonlyTeleBox } from "@netless/telebox-insider";
import type Emittery from "emittery";
import type { AppEmitterEvent } from "./index";
import type { AppManager } from "./AppManager";
import type { AppProxy } from "./AppProxy";
export declare class AppContext<TAttrs extends Record<string, any>, AppOptions = any> {
    private manager;
    appId: string;
    private appProxy;
    private appOptions?;
    readonly emitter: Emittery<AppEmitterEvent<TAttrs>>;
    readonly mobxUtils: {
        autorun: typeof autorun;
        reaction: typeof reaction;
        toJS: typeof toJS;
    };
    readonly objectUtils: {
        listenUpdated: typeof listenUpdated;
        unlistenUpdated: typeof unlistenUpdated;
        listenDisposed: typeof listenDisposed;
        unlistenDisposed: typeof unlistenDisposed;
    };
    private boxManager;
    private store;
    readonly isAddApp: boolean;
    readonly isReplay: boolean;
    constructor(manager: AppManager, appId: string, appProxy: AppProxy, appOptions?: AppOptions | (() => AppOptions) | undefined);
    getDisplayer(): import("white-web-sdk").Displayer<import("white-web-sdk").DisplayerCallbacks>;
    getAttributes(): TAttrs | undefined;
    getScenes(): SceneDefinition[] | undefined;
    getView(): View | undefined;
    getInitScenePath(): string | undefined;
    getIsWritable(): boolean;
    getBox(): ReadonlyTeleBox;
    getRoom(): Room | undefined;
    setAttributes(attributes: TAttrs): void;
    updateAttributes(keys: string[], value: any): void;
    setScenePath(scenePath: string): Promise<void>;
    mountView(dom: HTMLDivElement): void;
    getAppOptions(): AppOptions | undefined;
}
