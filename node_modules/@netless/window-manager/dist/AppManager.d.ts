import { AppStatus, Events } from "./constants";
import { AppProxy } from "./AppProxy";
import { AttributesDelegate } from "./AttributesDelegate";
import { BoxManager } from "./BoxManager";
import { CameraStore } from "./Utils/CameraStore";
import { MainViewProxy } from "./MainView";
import { ReconnectRefresher } from "./ReconnectRefresher";
import { ViewManager } from "./ViewManager";
import type { Displayer, Room } from "white-web-sdk";
import type { CreateTeleBoxManagerConfig } from "./BoxManager";
import type { AddAppParams, WindowManager, TeleBoxRect } from "./index";
export declare class AppManager {
    windowManger: WindowManager;
    displayer: Displayer;
    boxManager: BoxManager;
    cameraStore: CameraStore;
    viewManager: ViewManager;
    appProxies: Map<string, AppProxy>;
    appStatus: Map<string, AppStatus>;
    store: AttributesDelegate;
    mainViewProxy: MainViewProxy;
    refresher?: ReconnectRefresher;
    isReplay: boolean;
    private appListeners;
    constructor(windowManger: WindowManager, options: CreateTeleBoxManagerConfig);
    private onCreated;
    /**
     * 插件更新 attributes 时的回调
     *
     * @param {*} attributes
     * @memberof WindowManager
     */
    attributesUpdateCallback(apps: any): Promise<void>;
    private onAppDelete;
    bindMainView(divElement: HTMLDivElement, disableCameraTransform: boolean): void;
    addApp(params: AddAppParams, isDynamicPPT: boolean): Promise<string | undefined>;
    private beforeAddApp;
    private afterAddApp;
    closeApp(appId: string): Promise<void>;
    private baseInsertApp;
    private displayerStateListener;
    private displayerWritableListener;
    private get eventName();
    get attributes(): import("./index").WindowMangerAttributes;
    get canOperate(): boolean;
    get room(): Room | undefined;
    get mainView(): import("white-web-sdk").View;
    get focusApp(): AppProxy | undefined;
    safeSetAttributes(attributes: any): void;
    safeUpdateAttributes(keys: string[], value: any): void;
    setMainViewScenePath(scenePath: string): Promise<void>;
    private _setMainViewScenePath;
    setMainViewSceneIndex(index: number): Promise<void>;
    getAppInitPath(appId: string): string | undefined;
    safeDispatchMagixEvent(event: string, payload: any): void;
    private boxEventListener;
    focusByAttributes(apps: any): void;
    notifyReconnected(): Promise<void>;
    notifyContainerRectUpdate(rect: TeleBoxRect): void;
    dispatchInternalEvent(event: Events, payload: any): void;
    destroy(): void;
}
