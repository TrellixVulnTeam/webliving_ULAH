import type { ReadonlyTeleBox, View } from "@netless/window-manager";
import type { SlideController, SlideControllerOptions } from "../SlideController";
import { SideEffectManager } from "side-effect-manager";
import { DocsViewer } from "../DocsViewer";
export declare const ClickThroughAppliances: Set<string>;
export declare type MountSlideOptions = Omit<SlideControllerOptions, "context" | "onPageChanged"> & {
    onReady: () => void;
};
export interface SlideDocsViewerConfig {
    box: ReadonlyTeleBox;
    view: View;
    mountSlideController: (options: MountSlideOptions) => SlideController;
    mountWhiteboard: (dom: HTMLDivElement) => void;
}
export declare class SlideDocsViewer {
    viewer: DocsViewer;
    slideController: SlideController | null;
    protected readonly box: ReadonlyTeleBox;
    protected readonly whiteboardView: SlideDocsViewerConfig["view"];
    protected readonly mountSlideController: SlideDocsViewerConfig["mountSlideController"];
    protected readonly mountWhiteboard: SlideDocsViewerConfig["mountWhiteboard"];
    private isViewMounted;
    constructor({ box, view, mountSlideController, mountWhiteboard }: SlideDocsViewerConfig);
    $slide: HTMLDivElement;
    $whiteboardView: HTMLDivElement;
    render(): void;
    protected renderSlideContainer(): HTMLDivElement;
    protected renderWhiteboardView(): HTMLDivElement;
    mount(): this;
    protected onError: ({ error }: {
        error: Error;
    }) => void;
    protected refreshPages: () => void;
    protected getPageIndex(page: number): number;
    unmount(): this;
    setReadonly(readonly: boolean): void;
    destroy(): void;
    toggleClickThrough(tool?: string): void;
    protected scaleDocsToFit: () => void;
    protected onPlay: () => void;
    protected onNewPageIndex: (index: number) => void;
    protected sideEffect: SideEffectManager;
    protected wrapClassName(className: string): string;
    protected namespace: string;
}
