import type { RegisterParams } from "@netless/window-manager";
export interface FreezableSlide {
    freeze: () => void;
    unfreeze: () => void;
}
export declare let useFreezer: boolean;
export declare const FreezerLength = 2;
export declare const apps: {
    map: Map<string, FreezableSlide>;
    queue: string[];
    validateQueue(): void;
    set(appId: string, slide: FreezableSlide): void;
    delete(appId: string): void;
    focus(appId: string): void;
};
export declare type AddHooks = NonNullable<RegisterParams["addHooks"]>;
/**
 * Put this function in your register code:
 * `WindowManager.register({ addHooks })`
 * So that it will automatically freeze the app when it is not in focus.
 */
export declare const addHooks: AddHooks;
