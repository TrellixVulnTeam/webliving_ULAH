import { SideEffectManager } from "side-effect-manager";
export interface DocsViewerPage {
    src: string;
    height: number;
    width: number;
    thumbnail?: string;
}
export interface DocsViewerConfig {
    readonly: boolean;
    onNewPageIndex: (index: number) => void;
    onPlay?: () => void;
}
export declare class DocsViewer {
    constructor({ readonly, onNewPageIndex, onPlay }: DocsViewerConfig);
    protected readonly: boolean;
    protected onNewPageIndex: (index: number) => void;
    protected onPlay?: () => void;
    private _pages;
    set pages(value: DocsViewerPage[]);
    get pages(): DocsViewerPage[];
    $content: HTMLElement;
    $preview: HTMLElement;
    $previewMask: HTMLElement;
    $footer: HTMLElement;
    $pageNumberInput: HTMLInputElement;
    $totalPage: HTMLSpanElement;
    $btnPlay: HTMLButtonElement;
    $btnSidebar: HTMLButtonElement;
    pageIndex: number;
    unmount(): void;
    setReadonly(readonly: boolean): void;
    destroy(): void;
    setPageIndex(pageIndex: number): void;
    refreshTotalPage(): void;
    setSmallBox(isSmallBox: boolean): void;
    render(): HTMLElement;
    protected renderContent(): HTMLElement;
    private previewLazyLoad?;
    protected renderPreview(): HTMLElement;
    private refreshPreview;
    protected renderPreviewMask(): HTMLElement;
    setPaused: () => void;
    setPlaying: () => void;
    refreshBtnSidebar(): void;
    protected renderFooter(): HTMLElement;
    protected renderFooterBtn(className: string, $icon: SVGElement, $iconActive?: SVGElement): HTMLButtonElement;
    protected togglePreview(isShowPreview?: boolean): void;
    protected wrapClassName(className: string): string;
    protected namespace: string;
    protected isShowPreview: boolean;
    protected isSmallBox: boolean;
    protected sideEffect: SideEffectManager;
}
