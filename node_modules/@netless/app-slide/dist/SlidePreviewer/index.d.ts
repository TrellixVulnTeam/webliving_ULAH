import { Slide } from "@netless/slide";
import { DocsViewer } from "../DocsViewer";
export interface PreviewParams {
    container: HTMLElement;
    taskId: string;
    url?: string;
    debug?: boolean;
}
export default function previewSlide({ container, taskId, url, debug, }: PreviewParams): SlidePreviewer;
export declare class SlidePreviewer {
    readonly viewer: DocsViewer;
    readonly bgColor: string;
    readonly target: HTMLElement;
    slide: Slide | null;
    debug: boolean;
    $slide: HTMLDivElement;
    private readonly sideEffect;
    ready: boolean;
    private resolveReady;
    readonly readyPromise: Promise<void>;
    constructor(config: {
        target: HTMLElement;
    });
    render(): void;
    mount(taskId: string, url: string): void;
    protected renderStyle(): HTMLElement;
    protected registerEventListeners(): void;
    protected onPageChanged: (page: number) => void;
    protected onTransitionStart: () => void;
    protected onTransitionEnd: () => void;
    protected onError: ({ error }: {
        error: Error;
    }) => void;
    private destroyed;
    destroy(): void;
    protected refreshPages: () => void;
    protected getPageIndex(page: number): number;
    protected renderSlideContainer(): HTMLDivElement;
    protected onPlay: () => void;
    protected onNewPageIndex: (index: number) => void;
    protected wrapClassName(className: string): string;
    protected namespace: string;
}
