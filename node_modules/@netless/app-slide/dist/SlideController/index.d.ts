import type { AppContext } from "@netless/window-manager";
import type { Attributes } from "../typings";
import { Slide } from "@netless/slide";
export { syncSceneWithSlide, createDocsViewerPages } from "./helpers";
export declare const DefaultUrl = "https://convertcdn.netless.link/dynamicConvert";
export declare const MaxPollCount = 40;
export declare const EmptyAttributes: Attributes;
export interface SlideControllerOptions {
    context: AppContext<Attributes>;
    anchor: HTMLDivElement;
    onPageChanged: (page: number) => void;
    onTransitionStart: () => void;
    onTransitionEnd: () => void;
    onError: (args: {
        error: Error;
    }) => void;
}
export declare class SlideController {
    readonly context: SlideControllerOptions["context"];
    readonly slide: Slide;
    private readonly channel;
    private readonly room?;
    private readonly player?;
    private readonly sideEffect;
    private readonly onPageChanged;
    private readonly onTransitionStart;
    private readonly onTransitionEnd;
    private readonly onError;
    private syncStateOnceFlag;
    constructor({ context, anchor, onPageChanged, onTransitionStart, onTransitionEnd, onError, }: SlideControllerOptions);
    ready: boolean;
    private resolveReady;
    readonly readyPromise: Promise<void>;
    jumpToPage(page: number): void;
    private initialize;
    private kickStart;
    private registerEventListeners;
    private onSyncDispatch;
    private magixEventListener;
    private syncStateOnce;
    private onStateChange;
    private onSeeked;
    private pollCount;
    private pollReadyState;
    private _pageCount;
    get pageCount(): number;
    get page(): number;
    private createSlide;
    private destroyed;
    destroy(): void;
    timestamp: () => number;
    isFrozen: boolean;
    private _toFreeze;
    private freezePromise;
    private afterFreeze;
    freeze: () => void;
    unfreeze: () => Promise<void>;
}
