import { createElement, Component } from 'react';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".styles_ui-video-seek-slider__19u4I {\n  position: relative;\n  width: 100%;\n}\n.styles_ui-video-seek-slider__19u4I:focus {\n  outline: none;\n}\n.styles_ui-video-seek-slider__19u4I .styles_track__1K8_Z {\n  padding: 10px 0;\n  cursor: pointer;\n  outline: none;\n}\n.styles_ui-video-seek-slider__19u4I .styles_track__1K8_Z:focus {\n  border: 0;\n  outline: none;\n}\n.styles_ui-video-seek-slider__19u4I .styles_track__1K8_Z .styles_main__3UVKC {\n  width: 100%;\n  height: 3px;\n  background-color: #F5F5F5;\n  border-radius: 30px;\n  position: absolute;\n  left: 0;\n  top: 8.5px;\n  transition: transform 0.4s;\n  outline: none;\n}\n.styles_ui-video-seek-slider__19u4I .styles_track__1K8_Z .styles_main__3UVKC:focus {\n  border: 0;\n  outline: none;\n}\n.styles_ui-video-seek-slider__19u4I .styles_track__1K8_Z .styles_main__3UVKC .styles_buffered__CdIV2 {\n  position: absolute;\n  background-color: rgba(255, 255, 255, 0.3);\n  width: 100%;\n  height: 100%;\n  transform: scaleX(0.8);\n  z-index: 2;\n  transform-origin: 0 0;\n}\n.styles_ui-video-seek-slider__19u4I .styles_track__1K8_Z .styles_main__3UVKC .styles_seek-hover__15fUC {\n  position: absolute;\n  background-color: rgba(255, 255, 255, 0.5);\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n  transform: scaleX(0.6);\n  transform-origin: 0 0;\n  opacity: 0;\n  transition: opacity 0.4s;\n}\n.styles_ui-video-seek-slider__19u4I .styles_track__1K8_Z .styles_main__3UVKC .styles_connect__21Z7H {\n  position: absolute;\n  background-color: #005BF6;\n  width: 100%;\n  height: 100%;\n  z-index: 3;\n  left: 0;\n  transform: scaleX(0.13);\n  transform-origin: 0 0;\n}\n.styles_ui-video-seek-slider__19u4I .styles_track__1K8_Z.styles_active__2WHJt .styles_main__3UVKC {\n  transform: scaleY(2);\n}\n.styles_ui-video-seek-slider__19u4I .styles_thumb__20fF8 {\n  pointer-events: none;\n  position: absolute;\n  width: 12px;\n  height: 12px;\n  left: -6px;\n  top: 4px;\n  z-index: 4;\n  transform: translateX(100px);\n}\n.styles_ui-video-seek-slider__19u4I .styles_thumb__20fF8 .styles_handler__mbrLx {\n  transition: transform 0.2s;\n  border-radius: 100%;\n  width: 100%;\n  height: 100%;\n  background-color: #005BF6;\n  opacity: 0;\n  transform: scale(0.4);\n}\n.styles_ui-video-seek-slider__19u4I .styles_thumb__20fF8.styles_active__2WHJt .styles_handler__mbrLx {\n  opacity: 1;\n  transform: scale(1);\n}\n.styles_ui-video-seek-slider__19u4I .styles_hover-time__DsQnv {\n  position: absolute;\n  background-color: rgba(0, 0, 0, 0.3);\n  line-height: 18px;\n  font-size: 16px;\n  color: #ddd;\n  top: -25px;\n  left: 0;\n  padding: 5px 10px;\n  border-radius: 5px;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);\n  opacity: 0;\n  transform: translateX(150px);\n  pointer-events: none;\n}\n.styles_ui-video-seek-slider__19u4I .styles_hover-time__DsQnv.styles_active__2WHJt {\n  opacity: 1;\n}\n.styles_ui-video-seek-slider__19u4I:hover .styles_track__1K8_Z .styles_main__3UVKC .styles_seek-hover__15fUC {\n  opacity: 1;\n}\n";
var styles = {"ui-video-seek-slider":"styles_ui-video-seek-slider__19u4I","track":"styles_track__1K8_Z","main":"styles_main__3UVKC","buffered":"styles_buffered__CdIV2","seek-hover":"styles_seek-hover__15fUC","connect":"styles_connect__21Z7H","active":"styles_active__2WHJt","thumb":"styles_thumb__20fF8","handler":"styles_handler__mbrLx","hover-time":"styles_hover-time__DsQnv"};
styleInject(css);

var SeekSlider = /** @class */ (function (_super) {
    __extends(SeekSlider, _super);
    function SeekSlider(props) {
        var _this = _super.call(this, props) || this;
        _this.offset = 0;
        _this.secondsPrefix = "00:00:";
        _this.minutesPrefix = "00:";
        _this.handleTouchSeeking = function (event) {
            var pageX = 0;
            for (var i = 0; i < event.changedTouches.length; i++) {
                pageX = event.changedTouches[i].pageX;
            }
            pageX = pageX < 0 ? 0 : pageX;
            if (_this.mobileSeeking) {
                _this.changeCurrentTimePosition(pageX);
            }
        };
        _this.handleSeeking = function (evt) {
            if (_this.seeking) {
                _this.changeCurrentTimePosition(evt.pageX);
            }
        };
        _this.setTrackWidthState = function () {
            if (_this.track) {
                _this.setState({
                    trackWidth: _this.track.offsetWidth,
                });
            }
        };
        _this.handleTrackHover = function (clear, evt) {
            if (_this.track) {
                var position = evt.pageX - _this.track.getBoundingClientRect().left;
                if (clear) {
                    position = 0;
                }
                _this.setState({
                    seekHoverPosition: position,
                });
            }
        };
        _this.mouseSeekingHandler = function (event) {
            _this.setSeeking(false, event);
        };
        _this.setSeeking = function (state, evt) {
            evt.preventDefault();
            _this.handleSeeking(evt);
            _this.seeking = state;
            _this.setState({
                seekHoverPosition: !state ? 0 : _this.state.seekHoverPosition,
            });
        };
        _this.mobileTouchSeekingHandler = function () {
            _this.setMobileSeeking(false);
        };
        _this.setMobileSeeking = function (state) {
            _this.mobileSeeking = state;
            _this.setState({
                seekHoverPosition: !state ? 0 : _this.state.seekHoverPosition,
            });
        };
        _this.renderBufferProgress = function () {
            if (_this.props.bufferProgress) {
                if (_this.props.bufferColor) {
                    return createElement("div", { className: styles.buffered, style: __assign({}, _this.getPositionStyle(_this.props.bufferProgress), { backgroundColor: _this.props.bufferColor }) });
                }
                else {
                    return createElement("div", { className: styles.buffered, style: _this.getPositionStyle(_this.props.bufferProgress) });
                }
            }
            else {
                return null;
            }
        };
        _this.renderProgress = function () {
            if (_this.props.sliderColor) {
                return createElement("div", { className: styles.connect, style: __assign({}, _this.getPositionStyle(_this.props.currentTime), { backgroundColor: _this.props.sliderColor }) });
            }
            else {
                return createElement("div", { className: styles.connect, style: _this.getPositionStyle(_this.props.currentTime) });
            }
        };
        _this.renderHoverProgress = function () {
            if (_this.props.sliderHoverColor) {
                return createElement("div", { className: styles["seek-hover"], style: __assign({}, _this.getSeekHoverPosition(), { backgroundColor: _this.props.sliderHoverColor }) });
            }
            else {
                return createElement("div", { className: styles["seek-hover"], style: _this.getSeekHoverPosition() });
            }
        };
        _this.renderThumb = function () {
            if (_this.props.thumbColor) {
                return createElement("div", { className: _this.isThumbActive() ? styles.thumb + " " + styles.active : styles.thumb, style: __assign({}, _this.getThumbHandlerPosition()) },
                    createElement("div", { style: { backgroundColor: _this.props.thumbColor }, className: styles.handler }));
            }
            else {
                return createElement("div", { className: _this.isThumbActive() ? styles.thumb + " " + styles.active : styles.thumb, style: __assign({}, _this.getThumbHandlerPosition()) },
                    createElement("div", { className: styles.handler }));
            }
        };
        if (_this.props.offset) {
            _this.offset = _this.props.offset;
        }
        if (_this.props.secondsPrefix) {
            _this.secondsPrefix = _this.props.secondsPrefix;
        }
        if (_this.props.minutesPrefix) {
            _this.minutesPrefix = _this.props.minutesPrefix;
        }
        _this.state = {
            ready: false,
            trackWidth: 0,
            seekHoverPosition: 0,
        };
        return _this;
    }
    SeekSlider.prototype.componentDidMount = function () {
        this.setTrackWidthState();
        window.addEventListener("resize", this.setTrackWidthState);
        window.addEventListener("mousemove", this.handleSeeking);
        window.addEventListener("mouseup", this.mouseSeekingHandler);
        window.addEventListener("touchmove", this.handleTouchSeeking);
        window.addEventListener("touchend", this.mobileTouchSeekingHandler);
    };
    SeekSlider.prototype.componentWillUnmount = function () {
        window.removeEventListener("resize", this.setTrackWidthState);
        window.removeEventListener("mousemove", this.handleSeeking);
        window.removeEventListener("mouseup", this.mouseSeekingHandler);
        window.removeEventListener("touchmove", this.handleTouchSeeking);
        window.removeEventListener("touchend", this.mobileTouchSeekingHandler);
    };
    SeekSlider.prototype.changeCurrentTimePosition = function (pageX) {
        if (this.track) {
            var position = pageX - this.track.getBoundingClientRect().left;
            position = position < 0 ? 0 : position;
            position = position > this.state.trackWidth ? this.state.trackWidth : position;
            this.setState({
                seekHoverPosition: position,
            });
            var percent = position * 100 / this.state.trackWidth;
            var time = +(percent * (this.props.fullTime / 100)).toFixed(0);
            this.props.onChange(time, (time + this.offset));
        }
    };
    SeekSlider.prototype.getPositionStyle = function (time) {
        var position = time * 100 / this.props.fullTime;
        return {
            transform: "scaleX(" + position / 100 + ")",
        };
    };
    SeekSlider.prototype.getThumbHandlerPosition = function () {
        var position = this.state.trackWidth / (this.props.fullTime / this.props.currentTime);
        return {
            transform: "translateX(" + position + "px)",
        };
    };
    SeekSlider.prototype.getSeekHoverPosition = function () {
        var position = this.state.seekHoverPosition * 100 / this.state.trackWidth;
        return {
            transform: "scaleX(" + position / 100 + ")",
        };
    };
    SeekSlider.prototype.getHoverTimePosition = function () {
        var position = 0;
        if (this.hoverTime) {
            position = this.state.seekHoverPosition - this.hoverTime.offsetWidth / 2;
            if (this.props.limitTimeTooltipBySides) {
                if (position < 0) {
                    position = 0;
                }
                else if (position + this.hoverTime.offsetWidth > this.state.trackWidth) {
                    position = this.state.trackWidth - this.hoverTime.offsetWidth;
                }
            }
        }
        return {
            transform: "translateX(" + position + "px)",
        };
    };
    SeekSlider.prototype.secondsToTime = function (seconds) {
        seconds = Math.round(seconds + this.offset);
        var hours = Math.floor(seconds / 3600);
        var divirsForMinutes = seconds % 3600;
        var minutes = Math.floor(divirsForMinutes / 60);
        var sec = Math.ceil(divirsForMinutes % 60);
        return {
            hh: hours.toString(),
            mm: minutes < 10 ? "0" + minutes : minutes.toString(),
            ss: sec < 10 ? "0" + sec : sec.toString(),
        };
    };
    SeekSlider.prototype.getHoverTime = function () {
        var percent = this.state.seekHoverPosition * 100 / this.state.trackWidth;
        var time = Math.floor(+(percent * (this.props.fullTime / 100)));
        var times = this.secondsToTime(time);
        if ((this.props.fullTime + this.offset) < 60) {
            return this.secondsPrefix + (times.ss);
        }
        else if ((this.props.fullTime + this.offset) < 3600) {
            return this.minutesPrefix + times.mm + ":" + times.ss;
        }
        else {
            return times.hh + ":" + times.mm + ":" + times.ss;
        }
    };
    SeekSlider.prototype.isThumbActive = function () {
        return this.state.seekHoverPosition > 0 || this.seeking;
    };
    SeekSlider.prototype.drawHoverTime = function () {
        var _this = this;
        if (!this.props.hideHoverTime) {
            return (createElement("div", { className: this.isThumbActive() ? styles["hover-time"] + " " + styles.active : styles["hover-time"], style: this.getHoverTimePosition(), ref: function (ref) { return _this.hoverTime = ref; } }, this.getHoverTime()));
        }
        else {
            return null;
        }
    };
    SeekSlider.prototype.render = function () {
        var _this = this;
        return (createElement("div", { className: styles["ui-video-seek-slider"] },
            createElement("div", { className: this.isThumbActive() ? styles.track + " " + styles.active : styles.track, ref: function (ref) { return _this.track = ref; }, onMouseMove: function (evt) { return _this.handleTrackHover(false, evt); }, onMouseLeave: function (evt) { return _this.handleTrackHover(true, evt); }, onMouseDown: function (evt) { return _this.setSeeking(true, evt); }, onTouchStart: function () { return _this.setMobileSeeking(true); } },
                createElement("div", { className: styles.main },
                    this.renderBufferProgress(),
                    this.renderHoverProgress(),
                    this.renderProgress())),
            this.drawHoverTime(),
            this.renderThumb()));
    };
    return SeekSlider;
}(Component));

export default SeekSlider;
//# sourceMappingURL=index.es.js.map
