import type { ReadonlyTeleBox } from "@netless/window-manager";
import type { View } from "white-web-sdk";
import type { DebouncedFunction, Options } from "debounce-fn";
import { SideEffectManager } from "side-effect-manager";
import type { DocsViewerPage } from "../DocsViewer";
import { DocsViewer } from "../DocsViewer";
export interface StaticDocsViewerConfig {
    whiteboardView: View;
    readonly: boolean;
    box: ReadonlyTeleBox;
    pages: DocsViewerPage[];
    pagesSize: {
        width: number;
        height: number;
    };
    mountWhiteboard: (dom: HTMLDivElement) => void;
    /** Scroll Top of the original page */
    pageScrollTop?: number;
    onUserScroll?: (pageScrollTop: number) => void;
}
export declare class StaticDocsViewer {
    constructor({ whiteboardView, readonly, box, pages, pagesSize, pageScrollTop, mountWhiteboard, onUserScroll, }: StaticDocsViewerConfig);
    protected readonly: boolean;
    protected pages: DocsViewerPage[];
    protected box: ReadonlyTeleBox;
    protected whiteboardView: View;
    protected mountWhiteboard: (dom: HTMLDivElement) => void;
    pageScrollTop: number;
    pagesSize: {
        width: number;
        height: number;
    };
    onUserScroll?: (pageScrollTop: number) => void;
    viewer: DocsViewer;
    $pages: HTMLElement;
    $whiteboardView: HTMLDivElement;
    $scrollbar: HTMLElement;
    mount(): this;
    unmount(): this;
    setReadonly(readonly: boolean): void;
    destroy(): void;
    /** Sync scrollTop from writable user */
    syncPageScrollTop(pageScrollTop: number): void;
    render(): void;
    protected renderRatioHeight(): void;
    protected renderPages(): HTMLElement;
    protected renderWhiteboardView(): HTMLDivElement;
    protected renderScrollbar(): HTMLElement;
    protected scrollTopPageToEl(pageScrollTop: number): number;
    protected scrollTopElToPage(elScrollTop: number): number;
    /** Scroll base on DOM rect */
    protected elScrollTo(elScrollTop: number): void;
    /** Scroll base on docs size */
    protected pageScrollTo(pageScrollTop: number): void;
    protected scrollToPage(index: number): void;
    protected setupScrollTopEvent(): void;
    protected setupWhiteboardCamera(): void;
    protected updateUserScroll(): void;
    protected debounce<ArgumentsType extends unknown[], ReturnType>(fn: (...args: ArgumentsType) => ReturnType, options: Options, disposerID?: string): DebouncedFunction<ArgumentsType, ReturnType | undefined>;
    protected wrapClassName(className: string): string;
    protected onNewPageIndex: (index: number) => void;
    protected sideEffect: SideEffectManager;
    protected scrollbarHeight: number;
    protected setScrollbarHeight(elScrollbarHeight: number): void;
}
