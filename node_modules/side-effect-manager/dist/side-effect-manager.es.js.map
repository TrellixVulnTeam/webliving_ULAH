{"version":3,"file":"side-effect-manager.es.js","sources":["../src/gen-uid.ts","../src/side-effect-manager.ts"],"sourcesContent":["/**\n * @fileoverview UID generator, from Blockly.\n */\n\n/**\n * Legal characters for the unique ID.\n * Should be all on a US keyboard.  No XML special characters or control codes.\n * @private\n */\nconst SOUP =\n  \"!#%()*+,-./:;=?@[]^_`{|}~\" +\n  \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\nconst SOUP_LEN = SOUP.length;\nconst ID_LEN = 20;\nconst reusedIdCarrier = Array(ID_LEN);\n\n/**\n * Generate a unique ID, from Blockly.  This should be globally unique.\n * 87 characters ^ 20 length > 128 bits (better than a UUID).\n */\nexport const genUID = (): string => {\n  for (let i = 0; i < ID_LEN; i++) {\n    reusedIdCarrier[i] = SOUP.charAt(Math.random() * SOUP_LEN);\n  }\n  return reusedIdCarrier.join(\"\");\n};\n","import { genUID } from \"./gen-uid\";\n\nexport { genUID } from \"./gen-uid\";\n\nexport type SideEffectDisposer = () => void;\n\nexport class SideEffectManager {\n  /**\n   * Add a side effect.\n   * @param executor execute side effect\n   * @param disposerID Optional id for the disposer\n   * @returns disposerID\n   */\n  public add(\n    executor: () => SideEffectDisposer,\n    disposerID: string = genUID()\n  ): string {\n    this.flush(disposerID);\n    this.disposers.set(disposerID, executor());\n    return disposerID;\n  }\n\n  /**\n   * Add a disposer directly.\n   * @param disposer a disposer\n   * @param disposerID Optional id for the disposer\n   * @returns disposerID\n   */\n  public addDisposer(\n    disposer: SideEffectDisposer,\n    disposerID: string = genUID()\n  ): string {\n    this.flush(disposerID);\n    this.disposers.set(disposerID, disposer);\n    return disposerID;\n  }\n\n  /**\n   * Sugar for addEventListener.\n   * @param el\n   * @param type\n   * @param listener\n   * @param options\n   * @param disposerID Optional id for the disposer\n   * @returns disposerID\n   */\n  public addEventListener<K extends keyof WindowEventMap>(\n    el: Window,\n    type: K,\n    listener: (this: Window, ev: WindowEventMap[K]) => unknown,\n    options?: boolean | AddEventListenerOptions,\n    disposerID?: string\n  ): string;\n  public addEventListener<K extends keyof DocumentEventMap>(\n    el: Document,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => unknown,\n    options?: boolean | AddEventListenerOptions,\n    disposerID?: string\n  ): string;\n  public addEventListener<K extends keyof HTMLElementEventMap>(\n    el: HTMLElement,\n    type: K,\n    listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => unknown,\n    options?: boolean | AddEventListenerOptions,\n    disposerID?: string\n  ): string;\n  public addEventListener(\n    el: HTMLElement | Window | Document,\n    type: string,\n    listener: (this: HTMLElement | Window | Document, ev: Event) => unknown,\n    options?: boolean | AddEventListenerOptions,\n    disposerID = genUID()\n  ): string {\n    this.add(() => {\n      el.addEventListener(type, listener, options);\n      return () => el.removeEventListener(type, listener, options);\n    }, disposerID);\n    return disposerID;\n  }\n\n  /**\n   * Sugar for setTimeout.\n   * @param handler\n   * @param timeout\n   * @param disposerID Optional id for the disposer\n   * @returns disposerID\n   */\n  public setTimeout(\n    handler: () => void,\n    timeout: number,\n    disposerID: string = genUID()\n  ): string {\n    return this.add(() => {\n      const ticket = window.setTimeout(() => {\n        this.remove(disposerID);\n        handler();\n      }, timeout);\n      return () => window.clearTimeout(ticket);\n    }, disposerID);\n  }\n\n  /**\n   * Sugar for setInterval.\n   * @param handler\n   * @param timeout\n   * @param disposerID Optional id for the disposer\n   * @returns disposerID\n   */\n  public setInterval(\n    handler: () => void,\n    timeout: number,\n    disposerID: string = genUID()\n  ): string {\n    return this.add(() => {\n      const ticket = window.setInterval(handler, timeout);\n      return () => window.clearInterval(ticket);\n    }, disposerID);\n  }\n\n  /**\n   * Remove but not run the disposer. Do nothing if not found.\n   * @param disposerID\n   */\n  public remove(disposerID: string): SideEffectDisposer | undefined {\n    const disposer = this.disposers.get(disposerID);\n    this.disposers.delete(disposerID);\n    return disposer;\n  }\n\n  /**\n   * Remove and run the disposer. Do nothing if not found.\n   * @param disposerID\n   */\n  public flush(disposerID: string): void {\n    const disposer = this.remove(disposerID);\n    if (disposer) {\n      try {\n        disposer();\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  }\n\n  /**\n   * Remove and run all of the disposers.\n   */\n  public flushAll(): void {\n    this.disposers.forEach(disposer => {\n      try {\n        disposer();\n      } catch (e) {\n        console.error(e);\n      }\n    });\n    this.disposers.clear();\n  }\n\n  /**\n   * All disposers. Use this only when you know what you are doing.\n   */\n  public readonly disposers = new Map<string, SideEffectDisposer>();\n}\n"],"names":["SOUP","SOUP_LEN","length","reusedIdCarrier","Array","genUID","i","charAt","Math","random","join","constructor","Map","add","executor","disposerID","flush","disposers","set","addDisposer","disposer","addEventListener","el","type","listener","options","removeEventListener","setTimeout","handler","timeout","this","ticket","window","remove","clearTimeout","setInterval","clearInterval","get","delete","e","error","flushAll","forEach","clear"],"mappings":"AASA,MAAMA,EACJ,0FAEIC,EAAWD,EAAKE,OAEhBC,EAAkBC,MADT,IAOFC,EAAS,aACXC,EAAI,EAAGA,EARH,GAQeA,MACVA,GAAKN,EAAKO,OAAOC,KAAKC,SAAWR,UAE5CE,EAAgBO,KAAK,aClBvBC,6BA4JuB,IAAIC,IArJzBC,IACLC,EACAC,EAAqBV,iBAEhBW,MAAMD,QACNE,UAAUC,IAAIH,EAAYD,KACxBC,EASFI,YACLC,EACAL,EAAqBV,iBAEhBW,MAAMD,QACNE,UAAUC,IAAIH,EAAYK,GACxBL,EAiCFM,iBACLC,EACAC,EACAC,EACAC,EACAV,EAAaV,iBAERQ,KAAI,OACJQ,iBAAiBE,EAAMC,EAAUC,GAC7B,IAAMH,EAAGI,oBAAoBH,EAAMC,EAAUC,KACnDV,GACIA,EAUFY,WACLC,EACAC,EACAd,EAAqBV,YAEdyB,KAAKjB,KAAI,WACRkB,EAASC,OAAOL,YAAW,UAC1BM,OAAOlB,SAEXc,SACI,IAAMG,OAAOE,aAAaH,KAChChB,GAUEoB,YACLP,EACAC,EACAd,EAAqBV,YAEdyB,KAAKjB,KAAI,WACRkB,EAASC,OAAOG,YAAYP,EAASC,SACpC,IAAMG,OAAOI,cAAcL,KACjChB,GAOEkB,OAAOlB,SACNK,EAAWU,KAAKb,UAAUoB,IAAItB,eAC/BE,UAAUqB,OAAOvB,GACfK,EAOFJ,MAAMD,SACLK,EAAWU,KAAKG,OAAOlB,MACzBK,gBAGOmB,WACCC,MAAMD,IAQbE,gBACAxB,UAAUyB,2BAGJH,WACCC,MAAMD,YAGbtB,UAAU0B"}